{"name": "Как White Label помогает в развитии сервисов и продуктов. 5 примеров", "article": "\r\n\r\nЛюбое партнерство в бизнесе всегда носит индивидуальный характер и собственные предпосылки. Кто-то пытается найти новые каналы и способы развития, кто-то приходит к интеграции с партнером не от хорошей жизни. \r\n\r\nИдеальная партнерская программа – та, что развивает и дополняет продажи. Строить бизнес исключительно на партнерстве достаточно рискованно, поскольку при этом одна из компаний может быстро попасть в зависимость от партнера и потерять свои цели и стратегию. В этой статье — про партнерские отношения по модели White Label. \r\n\r\nWhite Label – понятие относительно новое. Помогут разобраться в нем 5 представителей разного бизнеса. Это сервисы, которые уже внедрили программу White Label и предлагают своим партнерам взаимовыгодное сотрудничество. Кому и зачем это может быть интересно? Разбираемся вместе с туроператором, SMM-сервисом, антивирусной системой и другими продуктами. \r\n\r\nWhite Label – это про взаимную выгоду\r\nWhite Label – это модель сотрудничества нескольких компаний. Она подразумевает реализацию услуг или продукции под брендом компании-продавца и оказывается ресурсами другой компании. Сегодня такую схему взаимодействия чаще всего используют организации с крупными клиентскими базами и зарекомендованным на рынке брендом. В других случаях модель работает менее эффективно.\r\n\r\nВ русской терминологии иногда встречается понятие “немарочный продукт” или сервис. То есть акцент снова-таки делается на том, что товар выпускается без лейбла и предлагается розничному торговцу или дистрибьютору. Чаще же всего в бизнесе распространено понятие White Label.\r\n\r\nПочему бизнес приходит к партнерской программе?\r\nУ всех свои причины. В целом, предпосылки для использования White Labeling выглядят так:\r\n\r\n\r\nКомпания не располагает достаточным бюджетом на маркетинг, а товар стоит того, чтобы стать интересным потенциальным партнерам. \r\nУ компании есть бюджет на маркетинг и есть время для этого. Но потенциал продаж исчерпал себя. Партнерство в данном случае – новое дыхание, которое не меняет направление работы, а отлично дополняет и развивает бизнес. \r\nКомпания желает выйти на новый рынок и обойти конкурентов. Партнеры открывают новые возможности и охватывают новую аудиторию. \r\nКомпания состоит из разработчиков и некому заниматься маркетингом и продажами.\r\n\r\n\r\nРуководитель проекта SpaOteli Татьяна Глинская:\r\n\r\n“Мы являемся крупным иностранным туроператором, поэтому партнёрские программы, а в частности White Label, – это неотъемлемая часть продвижения нашего продукта. Сегодня престижно иметь в арсенале такой вид партнерства, тем более, что он особенно хорошо подходит для нашей сферы деятельности (онлайн туры). У нас богатая форма поиска: расширенное подробное меню, где клиент может сам составить себе тур из разных параметров (направление, медицинское показание, тематика, питание, продолжительность, расположение отеля, виды спорта, и т.д.). Это всё очень хорошо обогащает и повышает уровень того ресурса, который все это предлагает. То есть такое White Label решение престижно иметь у себя на сайте.\r\n\r\nУ нас много рынков сбыта, поэтому предлагаем White Label на многих языках мира. Это удобно для партнеров и конечных потребителей. \r\n\r\nКонечно же есть и свои минусы. Многие партнеры думают, что после установки White Label дела пойдут сразу же вверх и прибыть «польется рекой». При этом они ничего не делают, чтобы правильно позиционировать White Label и свой ресурс. White Label требует определённой «огранки». Сайт должен соответствовать уровню предлагаемого продукта. Должен постоянно наполняться контентом и быть актуальным. Мы всегда следим за новыми веяниями в сфере СПА и оздоровительного отдыха, в сфере маркетинга и IT технологий. Посетитель должен легко находить White Label. Партнер должен также продвигать решение, которое он установил, делать какие-то акции, интересные предложения, подключать социальные сети, рассказывать о продукте, делать рассылку. Это кооперация двух сторон. \r\n\r\nМы работаем с PR-фирмой, аналитической компанией, используем силы собственного отдела маркетинга, плюс за каждой отдельной страной закреплены сотрудники, которые более детально, приближённо конкретно к рынку сбыта, продвигают продукты, в том числе White Label. Без постоянной работы по продвижению результат падает. Для нас плюс в White Label заключается также в наращивании трафика, посетителей. Люди любят, когда всё удобно и не надо додумывать или лишний раз задавать кучу вопросов”.\r\n\r\n\r\nВ чем выгода White Label для партнеров?\r\nКаждая компания, работающая по White Label схеме, предлагает партнерам собственные условия. Но чаще всего, White Label подразумевает следующие выгоды:\r\n\r\n\r\nБыстрый запуск программы сотрудничества. Партнер может оказывать новый вид услуг в короткие сроки и, тем самым, быстро повысить конкурентоспособность на рынке. Время разработки и тестирования нового продукта при использовании White Label в 2-5 раз меньше, чем разработка и тестирование собственного решения.\r\nДостижение новых целевых аудиторий. Продавец решения может получить дополнительный доход с клиентов клиента и, тем самым, выйти на новые рынки. Покупатель может расширить функциональные возможности продукта и привлечь пользователей, которым эти особенности важны.\r\nВозможность интеграции. Часто готовые сервисы могут быть легко адаптированы и внедрены в существующие платформы партнера. Например, в биллинг или системы оказания услуг. \r\nГотовая инфраструктура. Стороне, приобретающей готовый продукт, не нужно «вливать» бюджет в начальные стадии релиза и поддержки, оплачивать труд дополнительных специалистов. Стоимость самостоятельной разработки, как правило, превышает цену покупки готового решения в 2-7 раз, в зависимости от региона.\r\nДополнительная поддержка. Очень часто партнерам предлагается поддержка квалифицированных специалистов со стороны производителя. В случае сложных ситуаций, такая дополнительная линия поможет быстрее дать ответ. \r\nУменьшение оттока клиентской базы. Лояльность клиентов повысится, если поставщик услуг станет предлагать больше этих самых услуг, и клиенту не нужно будет искать других поставщиков. \r\nБрендирование. Приобретенный партнёром сервис может быть оформлен в его фирменном стиле и может устанавливаться на его доменных именах.\r\nГибкая цена. Обычно компании, внедряющие решения White Label, предлагают гибкую стоимость и скидки. Это зависит от объема продаж. Конечную розничную цену партнер формирует самостоятельно для клиентов, и она всегда договорная.\r\nВозможность постоплаты. Партнер может оказывать услуги и принимать клиентские платежи, а после ежемесячно оплачивать сервис по факту использования и с привязкой к количеству продаж. \r\n\r\n\r\n“Чтобы понять все преимущества решения White Label в сфере онлайн гемблинга, нужно хотя бы общо представлять структуру онлайн казино. \r\n\r\nЛюбое онлайн казино состоит из 3-х частей: платформы, контента и платежной системы. Платформа — это ПО, которое включает в себя весь необходимый для оперирования функционал, в который входит система регистрации, система отчетов, система управления игровым контентом, система бонусов, управление электронным кошельком и т.д. Контент, т.е. игры — это слоты, настольные игры, a также живые диллеры. Это отдельное направление, которое не является встроенным в платформу. Платежные системы – способ ввода/вывода денег на онлайн казино — visa, master card, neteller, skrill и т.д. \r\n\r\nЭто все разные направления бизнеса, и для того, чтобы создать проект, необходимо объединить их в одно целое. Модель White Label представляет собой комплексное решение по открытию онлайн казино, с полностью сформированной юридической, финансовой инфраструктурой и включает в себя: платформу по модели Saas, проинтегрированные игры, платежные системы и лицензию.\r\n\r\nОператору не нужно тратить время на получение лицензии и на заключение договоров с провайдерами игр и платежных систем. Оперирование производится под лицензией поставщика решения White Label и по его прямым договорам с провайдерами игр и платежных систем. Таким образом, благодаря White Label оператор получает возможность запустить проект в максимально сжатые сроки, а сэкономленное время и бюджет на получение лицензии он сможет потратить на продвижение своего проекта. Большая часть проектов на рынке работает именно по такой модели”.\r\n Николай Туголуков, менеджер по развитию BOSS Gaming Studio\r\n\r\nWhite Label – краткосрочная перспектива?\r\nСчитается, что основной недостаток White Label в том, что партнер, продавая продукт под собственным брендом, снижает фокусировку на своем. Вы быстро сможете получить деньги – для краткосрочной перспективы это звучит заманчиво. Но при долгом взаимодействии – ваш бренд просто может прекратить развитие. \r\n\r\nНо если бы недостаток White Label превалировал над всеми достоинствами модели, к нему бы вряд ли обращались многие компании, и White Label сотрудничество не становилось бы популярнее из года в год. Своим опытом это доказывают компании, которые только начинают внедрять немарочную систему партнерства, или которые давно ощутили выгоду от работы с White Label.\r\n\r\nВот как комментирует применение White Label в своем бизнесе директор НАНО Секьюрити, Денис Богданов:\r\n\r\n“Создание антивирусного решения с нуля – крайне ресурсоемкая задача, в том числе, в плане временных затрат. Во всем мире лишь единичные компании могут позволить себе такую разработку. Использование нашего готового решения позволяет партнерам в кратчайшие сроки получить свой собственный качественный антивирусный продукт, разработанный с учётом всех высоких стандартов индустрии. Кроме того, мы обеспечиваем профессиональную техническую поддержку, обновление с использованием наших ресурсов и прочие типы сопровождения нового продукта для наших клиентов. Такой подход интересен компаниям-партнерам, которые используют нашу White Label платформу для своих решений.\r\n\r\nНаш продукт NANO Antivirus White Label – это ко-брендинговая платформа, полностью основанная на наших технологиях. Мы используем платформу для создания новых антивирусных решений в соответствии с требованиями и потребностями клиента. \r\n\r\nМы предлагаем реализовать «практически невозможное» – за короткий срок и относительно небольшую цену получить собственный качественный антивирус. С партнёра полностью снимаются все технические вопросы, связанные с разработкой, а также дальнейшей поддержкой и сопровождением антивирусного решения. В итоге партнёр получает продукт с своим брендом, выполненный в соответствии с его техническим заданием. Далее он может начать зарабатывать деньги на дистрибуции собственного антивируса, использовать его в имиджевых целях или распоряжаться им как-то иначе в соответствии со своим бизнес-планом. При этом клиент получает антивирусное решение, аналогичное по качеству NANO Антивирус Pro. \r\n\r\nС продвижением White Label все просто: используем собственный сайт, сторонние интернет-ресурсы, специализированные мероприятия (конференции, выставки), прямые контакты с потенциальными клиентами”.\r\n\r\n\r\n\r\nВ сервисе для масспостинга и аналитики соцсетей KUKU.io стали предлагать White Label сотрудничество с этого года:\r\n\r\n“Сегодня бизнес любого размера активно приходит в социальные сети, которые становятся незаменимым каналом продаж и продвижения. Поэтому сервисы для автоматического постинга, детальная аналитика аккаунтов, использование удобного контент-календаря, а также управление SMM-командой и контентом онлайн значительно упрощают жизнь маркетологов. Поэтому KUKU.io White Label может быть интересен компаниям из любой отрасли и разных регионов. Для нас же — это, в первую очередь, выход на новую аудиторию. \r\n\r\nЛюбой из модулей, будь то аналитика или постинг, могут быть внедрены в ваш существующий продукт. Кроме этого, могут быть добавлены дополнительные возможности, позволяющие делать более детальный анализ контента и аудитории, автоматизировать работу сотрудников и ряд других. То есть за 1-2 месяца партнер получает полностью уникальный SMM-продукт, который сможет продавать под своим брендом.\r\n\r\nК нам обращаются финансовые, медиа, рекламные организации для создания собственных сервисов работы с социальными сетями. Практика показывает, что за этой моделью будущее, поэтому рассчитываем на интерес новых партнеров”. \r\n\r\n\r\nКомпания Black42pay оценивает свой опыт так:\r\n\r\n“Мы предлагаем возможности по организации оплаты банковскими картами на интернет сайтах со всего мира (эквайринг), в аренду свою сертифицированную платформу, которую партнер использует под свою платежную систему, под своим брендом.\r\n\r\nМы пришли к White Label, чтобы «держаться на плаву» в бизнесе. Такой формат сотрудничества подразумевает взаимную выгоду, при которой каждая сторона занимается зоной своей компетенции. \r\n\r\nПредоставляем интеграционные решения и создаем партнерские отношения с другими электронными платежными системами, например, партнерство по White Label технологического направления. Обеспечиваем программно-серверную часть системы. Наша выгода – проценты от интеграции и аренды программного обеспечения, выгода наших White Label партнеров — возможность продвинуться на рынке эквайринга и электронных платежей. \r\n\r\nУ нашего White Label партнера затраты минимальны, так как перечень необходимых ему модулей для своей платежной системы он выбирает сам, согласно прайсу и пожеланий конечного результата в работе системы.\r\n\r\nС момента внедрения White Label модели у нас были заключены десятки соглашений, схема White Label работает, партнеры довольны результатами, поскольку получили возможность запустить свою платежную систему с нуля с минимальными потерями времени и средств.\"\r\nКак видно, White Label активно завоевывает доверие в разных отраслях и не собирается исчезать с сайтов компаний. А как вы оцениваете такое сотрудничество? Был ли у вас подобный опыт? Делитесь в комментариях!"}


{"name": "Как сделать сайдбар за 5 строк кода", "article": "Сайдбары хороши в двух случаях: если на них расположено что-то настолько важное, что они должны всегда быть перед глазами (взять, к примеру, любой почтовый клиент, да хотя бы и Gmail) или если нужно иметь возможность это самое важное спрятать для экономии места (опять же, как в Gmail, но уже в мобильной версии). Браться за создание сайдбаров с нуля – задача не для средних умов, да и вообще бессмысленно. Для такой задачи лучше употребить соответствующий фреймворк. Об одном из таких примеров мы сегодня и поговорим.\r\n\r\n\r\n\r\nКоротко о Webix\r\nПрежде чем перейти непосредственно к коду, давайте обмолвимся коротко, что это за библиотека такая. Итак, Webix представляет из себя библиотеку UI компонентов разной сложности, от простой кнопки до Spreadsheet Widget, с помощью которого можно создавать онлайн таблицы в стиле Excel. Помимо собственно компонентов, в наличии механизм обработки событий, поддержка оффлайн-режима, интеграция с jQuery, AngularJS, Vue.js, Backbone.js, online инструменты: Skin builder, Form builder. Заявлена совместимость с Angular 2.\r\n\r\nУзнать больше можно на странице документации, а мы плавно переходим к практической части.\r\n\r\nПодключаем необходимые файлы\r\nЕсли вы загрузите архив с библиотекой, внутри папки codebase вы обнаружите необходимые js и css файлы:\r\n\r\n&lt;link rel=\"stylesheet\" href=\"./codebase/webix.css\"&gt;\n&lt;script src=\"./codebase/webix.js\"&gt;&lt;/script&gt;\r\nТакже можно использовать CDN:\r\n\r\n&lt;link rel=\"stylesheet\" href=\"http://cdn.webix.com/edge/webix.css\"&gt;\n&lt;script src=\"http://cdn.webix.com/edge/webix.js\"&gt;&lt;/script&gt;\r\nИли NPM:\r\n\r\nnpm install webix\r\nИли даже NuGet:\r\n\r\nnuget install Webix\r\nИли если вы предпочитаете Bower:\r\n\r\nbower install webix\r\nВсе вышеперечисленное относится непосредственно к Webix. Для того, чтобы получить возможность создавать сайдбары, нам понадобится еще парочка файлов. Доступ к ним же через CDN:\r\n\r\n&lt;script src=\"//cdn.webix.com/components/sidebar/sidebar.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"//cdn.webix.com/components/sidebar/sidebar.css\"&gt;\r\nСайдбар на примере e-mail клиента\r\nПоскольку мы уже заговорили об e-mail клиентах, не будем отступать от этой темы и создадим в качестве примера именно такое приложение. С помощью компонента DataTable я взял вот такой вот просмотрщик имейлов, к которому мы и будем добавлять сайдбар:\r\n\r\n\r\n\r\nПоскольку обзор DataTable не входит в наши планы, подробно останавливаться на нем я не буду, исходный код примера можно будет посмотреть ниже.\r\n\r\nНачнем с основ. Для того, чтобы добавить в приложение определенный компонент, в Webix используется свойство view. Например, мы хотим создать кнопку:\r\n\r\nview: \"button\"\r\nДля инициализации Webix-приложения нам понадобится следующий код:\r\n\r\n// опционально. код выполнится после загрузки страницы \nwebix.ready(function(){\n    // конструктор\n    webix.ui({\n        // описание приложения\n        view: \"button\",\n    });\n});\r\nКод выше создаст страницу, состоящую из одной кнопки. Поскольку наше приложение состоит из нескольких компонентов, нам нужно задуматься о создании лэйаута. Для этого используются свойства rows и cols, которые служат для создания рядов и колонок.\r\n\r\nНапример:\r\n\r\nwebix.ui({\n    cols: [\n        { view: \"button\"},\n        { view: \"button\"}\n    ]\n});\r\nСоздаст уже две колонки, по одной кнопке в каждой. Комбинируя эти свойства, добавляя вложенные колонки и ряды, меняя их размеры, например, с помощью свойства gravity можно создать лэйаут необходимой сложности.\r\n\r\nТеперь мы можем перейти к сайдбару. Он основан на компоненте Tree и также использует формат JSON для описания своей структуры. Для удобства лучше хранить такое описание в отдельной переменной.\r\n\r\nНаш сайдбар будет состоять из следующих пунктов меню:\r\n\r\nvar menu_data = [\n  {id: \"inbox\", icon: \"envelope\", value: \"Inbox\"},\n  { /* прочие пункты */ },\n  {id: \"tags\", icon: \"tags\", value:\"Tags\", data:[\n      { id: \"friends\", value: \"Friends\"},\n      { id: \"work\", value: \"Work\"},\n      { id: \"news\", value: \"News\"}\n  ]}\n],\n\r\nКаждый элемент должен иметь уникальный ID. value определяет, каким будет текст пункта меню, а icon – иконку. Webix использует набор иконок Font Awesome. Обратите внимание на пункт Tags. Он содержит вложенные подменю, которые будут открываться по клику.\r\n\r\nИтак, суммируя все вышесказанное, мы можем перейти к нашему приложению:\r\n\r\nwebix.ui({\n    cols:[\n        /* первая колонка, сайдбар */\n        { \n            view: \"sidebar\",\n            data: menu_data,  \n        },\n        /* вторая колонка */\n        { /* dataview component */ }\n    ]\n});\r\nВ принципе, это все, что требуется для создания базового сайдбара: указать, что именно этот компонент мы хотим создать, а также выбрать источник данных о его структуре.\r\n\r\nВ результате мы получили вот такой сайдбар:\r\n\r\n\r\n\r\nПример кода и демку можно посмотреть здесь.\r\n\r\nДобавляем кнопку для скрытия сайдбара\r\nЕсли мы хотим сэкономить немного места или просто не хотим, чтобы сайдбар мозолил глаза, можно добавить в приложение кнопку-гамбургер, знакомую нам по мобильным (и не только) приложениям. Для этого необходимо добавить к приложению верхний тулбар, что немного усложнит наш лэйаут. Теперь он будет состоять из двух рядов. В первый из них, верхний ряд мы и поместим тулбар. Второй, нижний, останется без изменений и будет состоять их просмотрщика с сайдбаром:\r\n\r\nwebix.ui({\n    rows:[\n        { /* здесь будет тулбар */},\n        {cols:[\n            { /* сайдбар */ },\n            { /* наши имейлы */ }\n        ]}\n    ]\n});\r\nДавайте разберемся с кодом, который нам понадобится для создания заголовка. Как и было сказано, тип создаваемого компонента определяется значением свойства view. В данном случае этим значением будет toolbar. Его содержимое определяется значением свойства elements. В нашем случае мы поместим на тулбар следующие элементы: кнопку-гамбургер, заголовок и несколько иконок-уведомлений:\r\n\r\n{view: \"toolbar\", elements: [\n    /* кнопка-гамбургер */\n    { view: \"button\", type: \"icon\", icon: \"bars\",\n      width: 37, align: \"left\", css: \"app_button\", \n      click: function(){\n          $$(\"$sidebar1\").toggle()\n      }\n    },\n    /* заголовок */\n    { view: \"label\", label: \"Webix E-Mail CLient\"},\n    { /* добавляем пустое пространство */ },\n    /* уведомление 1 */\n    { view: \"button\", type: \"icon\", icon: \"envelope-o\",\n      width: 45, css: \"app_button\", badge:4},\n    /* уведомление 2 */\n    { view: \"button\", type: \"icon\", icon: \"bell-o\",\n      width: 45, css: \"app_button\", badge:10}\n    ]\n},\r\nСвойства type: \"icon\" и icon: «icon-name» создают кнопки-иконки. Свойство click позволяет определить функцию, которая будет вызываться по клику. В данном случае, она переключает состояния сайдбара. К двум последним кнопкам мы добавили свойство badge, которое позволяет использовать оранжевые бейджи с номерами, соответствующими значению свойства.\r\n\r\nВот что получилось в итоге:\r\n\r\n\r\n\r\nВ свернутом виде остаются видимыми иконки меню сайдбара. Наведя на них курсор, можно посмотреть содержимое меню и выбрать один из пунктов.\r\n\r\nРаскрытый сайдбар имеет уже привычный нам вид:\r\n\r\n\r\n\r\nИ да, обратите внимание на значки уведомления справа вверху. Именно ради этих оранжевых кружочков мы и использовали свойство badge.\r\n\r\nПопробовать этот пример и поиграть с кодом можно по этой ссылке.\r\n\r\nЗаключение\r\nПриведенный пример не описывает всех возможностей данного компонента. Помимо прочего, вы можете задавать шаблоны для элементов сайдбара: указывать CSS-класс, который нужно к ним применить, менять внешний вид стрелок для многоуровневых меню и т.д. Sidebar наследует API компонента Tree, а также предоставляет набор уникальных для него методов. Более подробно о них вы можете прочитать на странице документации."}


{"name": "Кейс SMM-приложения KUKU.io: путь от спринта в 4 месяца до разумного планирования", "article": "Ребята из стартапа KUKU.io, популярного сервиса для SMM, прошли долгий путь от хаотичного планирования и спринтов, растянутых почти на полгода, до логичного управления задачами, автономной команды и, наконец, закрываемых в срок спринтов. Молодым проектам на заметку.\r\n\r\nМенеджер проекта Павел поделился историей о том, как удалось безболезненно решить большиство проблем:\r\n\r\n\r\n\r\nМы разрабатываем SMM-приложение KUKU.io с мая прошлого года и только сейчас нам удалось настроить все процессы так, чтобы хаос в задачах был сведен к минимуму, а пользователи оставались довольными новыми функциональными особенностями, о которых просили нас, как можно чаще.\r\n\r\nКогда мы начинали, KUKU.io умел публиковать контент в 4 социальные сети: Facebook, Вконтакте, Twitter и Linkedin. Однозначно, полноценным управлением социальными сетями это никак не назовешь, и приложение постепенно начало обрастать другими особенностями: пользователи хотели видеть разделение аккаунтов соцсетей в каналы или проекты, анализ социальных сетей стал ключевым фактором выбора (или не выбора) сервиса, UTM-метки, сокращение ссылок, много картинок в одном посте, новые соцсети (сейчас KUKU.io поддерживает 10) и др. — все это предстояло реализовать.\r\n\r\nВ первые дни, когда я пришел в проект, была ситуация, когда вроде все понятно, а на деле ничего не понятно. Что за проект я понял очень быстро, без деталей, так как продукт уже на продакшене, и можно потыкать посмотреть, что к чему. К тому же, команда сразу позаботилась о крутом UX/UI, разобраться за несколько минут сможет даже человек, далекий от социальных сетей.\r\n\r\nКоманда… Команда есть, отличные все ребята, профессионалы в своем деле: от нереальных разработчиков до маркетолога и сммщика. Кто что делает, не понятно. :) Есть какое-то управление проектами и системы: Jira и GanttPRO, в них что-то есть, но что это — тоже ни малейшего представления (сторей тасков, описаний к ним минимальных, логики, ничего нет). \r\n\r\nЛезу в документы — есть в драйве море папок, в которых вроде по названиям что-то адекватное намечается: альфа версия, анализ конкурентов, бета версия, демо, спека версии 1.0 и тд. Открываешь — заголовок, какие-то наброски и все. \r\n\r\nВ результате имеем: рабочий продукт, без понимания, как и что в нем работает, кто над чем работает, кто product owner, кто за что отвечает, куда проект идет, какие цели в дальнейшем, какие рабочие правила. Планирование не определить какое было, так как видно, пытались прийти к какому-то фреймворку гибкому, но все забрасывали. В результате имелась куча релизов, спринтов незакрытых, гигантский спринт в 4 месяца. По рабочему процессу была такая схема: практически любой участник команды создавал себе issues в Jira, естественно без описаний. \r\n\r\nТ.е. залазим в спринт или бэклог, а там какая-нибудь борода «Изменить существующий блок» или баг «Не работает login — консольная ошибка #».\r\n\r\nПонятное дело, продукт на продакшене совсем недавно. Багов море, функциональных особенностей не хватает, их надо быстро выкатывать. Плюс платежную систему надо привязать, пожар полный.\r\n\r\nПоэтому начали с простого:\r\n\r\n\r\nВзяли за основу канбан (свой проект, поэтому нет привязки по срокам).\r\nОпределили, кто за что отвечает, кто принимает решения.\r\nВыбрали актуальные задачи.\r\nРасставили приоритеты.\r\nДоговорились с QA насчет метода описания багов в виде use cases с описанием среды.\r\nНаконец, прогрумили бэклог (заняло очень много времени).\r\nНачали описывать все через истории, чтобы уменьшить количество багов.\r\n\r\nЕсть разные механики, estimation техники и фреймворки, подходящие для аутсорсинговых компаний, но совершенно нереализуемые у собственных проектов. Мы начали выбирать элементы из разных методологий и пробовать, что приживется. \r\n\r\nИз Scrum мы взяли Daily Meetings, которые сразу показали больные места в рабочем процессе и позволили ребятам разобраться, кто над чем работает и наладить общение внутри команды. К сожалению, по началу они занимали очень много времени, иногда до часа. Решилась эта проблема, когда команда стала более автономной: теперь на митингах нет места обсуждениям задач, только быстрые отчеты кто-что делает и что планирует сделать.\r\n\r\nПотом попробовали итерации, но это не дало желаемого эффекта, так как продукт в live, команда бомбит фичи одна за одной, баги прут. Не сильно нам помогло вначале, но мы к этому еще придем, медленно, но верно. \r\n\r\nРетроспективу мы не стали вводить, так как смысла особого не было. Планирование делали на месяц, так как быстрее вряд ли получалось бы, слишком динамичный проект, хотя и сейчас есть проблемы со сроками. Решили, что к story points мы придем позже и оставили все в тасках, но с описанием логики и use cases, что дало быстрый результат: условия приемки были понятны для всех, и уменьшилось количество багов. \r\n\r\nИз XP взяли большую часть CI (Continuous Integration), что ускорило обновления и, опять же, позволило выпускать более качественные релизы, обратную связь с клиентом (users' feedback) взяли за основу при расставлении приоритетов; все решения принимали сами, на свой страх и риск.\r\n\r\nКстати, про приоритеты. Это стало одним из наиболее болезненных процессов. Каждый считает, что его задача — самая важная, и борется за нее до конца, а хотелось бы расставлять приоритеты меньшей «кровью». \r\n\r\nРаньше у нас был такой поток задач и фидбэков, что мы не знали, за что браться и кидались на все подряд, чтобы угодить каждому пользователю. Следующая стадия была полная асинхронность действий: моя задача — главная. Сейчас, когда мы отладили какой-никакой процесс и пришли к пониманию, что всем угодить не получится, мы стали грамотно распределять рекомендации пользователей и балансировать между внутренними задачами и новыми запросами. К нашей радости, запросы пользователей в большинстве случаев очень схожи, и мы можем с уверенностью добавлять новые особенности.\r\n\r\nКанбан помог своим бордом, так и оставили его, только добавили несколько колонок, исходя из нужд CI. \r\n\r\nПозже из Scrum взяли story и epics — идем к детальному планированию. Можно сказать, что мы приходим к более детальному планированию и коротким итерациям. Сейчас мы знаем, что у нас будет почти на месяц вперед на процентов 80-90. И легко можем вносить правки.\r\n\r\nСледующим шагом для нас стало создание автономной команды. Все пишут, что автономные команды это круто — а это действительно круто (уже много где разжевано почему: больше вовлечение, интерес и отдача, что позволяет назвать группу единомышленников командой, меньше рисков и непоняток) — но разработчики в большей своей массе предпочитают, чтобы их не трогали, мол, дайте нам ТЗ детальное, и мы по этому ТЗ все и сделаем, а если будет непонятно — мы ж такие все крутые, сделаем на свое усмотрение, и готовность определим тоже.\r\n\r\nЧто в нашем случае привело к автономности:\r\n\r\n1) постоянно меняющийся и растущий продукт и отпуска — все понюхали пороху в роли других участников и имеют представление, что и как устроено в продукте.\r\n2) ежедневные митинги — мы на них не только рассказываем, что кто делает, но и стараемся решить оперативно задачу, таким образом вся команда, хоть краем уха, но знает про изменения либо про проблему (если мы понимаем, что затянется обсуждение, то остальных участников отпускаем).\r\n3) планирование — мы знаем, что у нас сейчас и к чему мы идем.\r\n4) сплоченость команды — походы в бар, корпоративы, живое общение, отсутствие давления.\r\n5) коммуникации — еще надо расти в этом направлении, но сейчас уже, если у кого-то есть проблема, ее не держат в загашнике долго, а сразу говорят свое фе или бьют в колокол, нет боязни высказаться.\r\n\r\nВсе это привело к тому, что ребята знают про зависимость своих задач от напарника либо от сторонних факторов и не работают вслепую, мелкие косяки и проблемы исправляются быстро в зародыше либо еще в зачатке :), меньше исправлений и технического долга, так как понятны среднесрочные цели.\r\n\r\nИтак, что же по итогу? Прежде всего, у нас уменьшилось количество багов: сказать насколько, точно не возьмусь (честно говоря, не вел учета, интересно будет проанализировать), но на выходе у нас очень добротный продукт, а те баги, которые появляются, не являются критичными — мелкие недочеты в основном из-за невнимательности (хотя все еще бывают косяки с мержем и деплоем). Но нашему QA (а он у нас 1) стало жить проще, да и радовать пользователей релизами мы стали намного чаще.\r\n\r\nМы планируем примерно на месяц, потом фикс, регресс, деплой. Итого примерно раз в 5-6 недель релизим обновление с крупными особенностями, а обновления с багфиксом — по мере поступления сообщений от пользователей. Раньше вообще наши планы были космосом. Спринт на 3 недели мог затянуться на пару месяцев.\r\n\r\nЯркие последние примеры: это Контент План для социальных сетей и Командный План для SMM и маркетинговых агенств и компаний, в которых не один человек занимается продвижением в социальных сетях. Последний мы думали сделать за месяц по первой прикидке вообще без понимания как это должно быть. После анализа, декомпозиции, написания небольшой «спеки» оценили скоуп задач в 2 месяца. По факту команда выкитила командный план, кучу обвесов к нему, smm и маркетинговых плюшек, годовые подписки, улучшили аналитику социальных сетей, оттестировали все это, сделали регресс и релизнули на продакшен за 3 месяца. Это с учетом того, что у нас — 3 разработчика, у двоих была сессия и выселение из общежития, параллельно создавался Контент План, они связаны между собой и должны мержится без конфликтов. И оно все работало, как было описано. Это реально успех! \r\n\r\nЕще одно достижение огромное достижение — меньше конфликтов в команде.\r\n\r\nДальше хотелось бы прийти к более частым релизам и уведомлять пользователей о наших ближайших обновлениях. Весь road map, мне кажется, не так круто показывать — нет интереса, все на ладони, а так ждать будут. :)"}


{"name": "4 инструмента по полочкам. Управление проектами с WBS, Диаграммой Ганта, CPM и Time-Cost", "article": "Я не раскрою тайну, если скажу, что выстроенное управление проектами — ключ к успеху проекта. Каждый из менеджеров проектов или команд выбрал, на интуитивном уровне или практическом опыте, для себя набор инструментов, помогающих в выстраивании процессов и отношений в команде.\r\n\r\nВ течение времени инструменты управления проектами перешли от карандаша и листа бумаги (иногда они и возвращаются в виде Канбан доски в офисе) к софту для управления проектами и спредшитам (как оффлайн, так и онлайн, от простого плана проекта с использованием диаграммы Ганта и Канбан досок, заканчивая комплексными системами), призванными облегчить управление, которые так просто выбрать… и пролететь, потому что непонятно, для чего и в чем премущества.\r\n\r\n\r\n\r\nПоэтому, так или иначе, выбор инструментов не стоит начинать с софта (кстати, здесь был большой список из 43 систем для управления проектами). Беру на себя смелось перевести неплохой гайд по четырем инструментам управления проектами от TakingITGlobal, являющихся базой для многих систем.\r\n\r\n\r\n\r\nWork Breakdown Structure (Иерархическая Структура Проекта)\r\nДля упрощения управления сложным проектом целесообразно его разделять на компоненты в иерархическую структуру, так называемую ИСП, или WBS (the work breakdown structure). Такая иерархическая структура проекта может быть представлена в виде блочной диаграммы:\r\n\r\n\r\n\r\nПлан Иерархической Структуры Проекта\r\n\r\n\r\n\r\nТерминология для разных уровней\r\nКаждая организация использует собственную терминологию для классификации компонентов ИСП, согласно их уровню иерархии. Например, некоторые организации разделяют на разные уровни задачи, подзадачи и перечни работ.\r\n\r\nДругие же используют фазы, данные и активности.\r\n\r\n\r\n\r\nУстройство иерархии по результатам и фазам работ\r\nИСП может быть сформирована вокруг фаз и результатов проекта на протяжении всего его жизненного цикла. За более высокие уровни структуры обычно ответственны рабочие группы. Тогда как задачи нижнего уровня выполняются индивидуально. Таким образом, в ИСП как структуре, основанной на результатах, вовсе не обязательно создавать конкретные задачи.\r\n\r\nУровень деталей\r\nРазбиение проекта на компоненты ускоряет распределение ресурсов и устанавливает сферы ответственности каждого члена команды. Чем лучше вы детализируете вашу ИСП, тем более точными будут ваши действия.С одной стороны, не следует слишком детализировать структуру, чтобы не стать жертвой микро-менеджмента. Но с другой, не стоит делать элементы слишком крупными, чтобы сохранить их управляемость. Оптимальная величина элементы — от нескольких дней до нескольких месяцев.\r\n \r\nНазначение ролей в планировании проекта\r\nИСП — это основа планирования проекта. Однако она делается тогда, когда вы четко знаете взаимосвязь ваших задач и время, необходимое на их решение. ИСП создается специально, чтобы выделить задачи в CPM или PERT подходах.\r\n\r\nДиаграммы Ганта\r\nДиаграммы Ганта в наше время являются стандартом в управлении проектами, принципы которых используют как в теории, так и в практике.\r\nВ эру научного менеджмента Генри Гант создал инструмент, который показывает прогресс проекта в специальной диаграмме. Изначально диаграмма создавалась для отслеживания процесса построения кораблей. Сегодня же этот инструмент представляет собой горизонтальную столбчатую диаграмму для управления проектами.\r\n\r\n\r\n\r\nГоризонтальная ось в диаграмме Ганта — шкала времени, которая может быть выражена в абсолютном значении либо значении времени, привязанного к началу проекта. Выбор времени зависит от типа проекта: обычно используются недели или месяцы. Столбы в диаграмме показывают время начала и окончания индивидуальной задачи в проекте.\r\n\r\n\r\n\r\nДля больших проектов, задачи могут быть разделены на подзадачи, которые имеют собственные дополнительные диаграммы Ганта для более удобного прочтения.\r\n\r\nКак можно улучшить диаграмму Ганта?\r\nНачальная версия диаграммы Ганта (будут это шаблоны диаграммы Ганта, или же созданные вами проекты) зачастую требует внедрения дополнительных элементов для того, чтобы она мультифункциональная и эффектина не только для построения проектов, но и для управления ими.\r\n\r\n\r\nВертикальный маркер может быть использован для того, чтобы отметить определенную точку во временной оси.\r\nПрогресс каждой задачи может быть показан как столбец с отображением хода задачи в реальном времени.\r\nЗависимости могут отображаться как линии или цветные указатели.\r\nНеобходимые ресурсы могут быть указаны для каждой задачи в отдельности.\r\nМогут отображаться этапы работ.\r\n\r\n\r\nСильная сторона диаграммы Ганта в возможности наглядно отобразить статус каждой задачи, создавать план проекта с шаблоном диаграммы, отслеживать процессы на основе приоритетного планирования. Обычно диаграммы Ганта строят в специальном софте для управления проектами, например, Gantt chart — GanttPRO, Smartsheet или Wrike.\r\n\r\nCPM (Метод Критического Пути)\r\nКритический путь\r\nВ 1957 году американская компания DuPont разработала метод, который предназначался для решении проблемы закрытия химических заводов компании для ремонта и последующего старта, когда ремонт будет завершен. Понимая всю сложность данного проекта, компания решила воспользоваться Методом Критического пути для решения такой задачи.\r\n\r\nТакой дает следующие преимущества:\r\n\r\n\r\nДает графическое отображение проекта\r\nПредсказывает время, требуемое для завершения задачи\r\nПоказывает, какие задачи критичны для выполнения проекта, а какие нет.\r\n\r\nКритический путь моделирует активности и события проекта во взаимосвязанную сеть. Активности отображаются как “узлы”, а события (начало и конец активности) выглядит как арки и линии между узловыми пунктами. \r\n\r\n\r\n\r\nДиаграммы критического пути\r\nЭтапы построения диаграммы:\r\n\r\nОбозначьте индивидуальные задачи.\r\nОпределите последовательность этих задач.\r\nНарисуйте диаграмму в виде сети взаимосвязанных задач.\r\nОцените время каждой активности.\r\nВыделите критический путь (наибольшая цепочка действий в вашей сети)\r\nОбновляйте диаграмму по ходу проекта.\r\n\r\nОпределите индивидуальные задачи\r\nДля создания ИСП следует начать со списка всех задач проекта. Он может быть использован как базис для создания последовательностей и оценки времени выполнения проекта на следующих этапах.\r\n\r\nОпределение последовательности задач\r\nВыполнение одних задач напрямую связано с окончанием других. Определите, какие задачи следует выполнить в первую очередь, чтобы другие задачи не сдвигались.\r\n\r\nНарисуйте диаграмму в виде сети взаимосвязанных задач\r\nКогда задачи и их последовательность определена, может быть построен критический путь. Изначально он создавался как узловая активность, но сейчас некоторые менеджеры проектов предпочитают показывать его в виде арок.\r\n\r\nОцените время каждой активности.\r\nВремя, требуемое для завершения каждой задачи, может быть оценено на основе прошлого опыта или оценок экспертов. В то же время, критический путь — это оценочная модель, которая не учитывает разные варианты окончаний задач.\r\n\r\nОпределение критического пути\r\nЭто наибольшая по длительности цепочка задач в вашей системе. Его важность заключается в том, что задачи, располагающиеся на этом пути не могут быть отложены либо просрочены без переноса дедлайнов проекта. Такой вид анализа очень важен для оценки длительности проекта в целом.\r\n\r\nКритический путь может быть определен 4 ключевыми параметрами каждой активности:\r\n\r\nБлижайшее время старта (БС) — момент, когда все предыдущие задачи завершены.\r\nБлижайшее время окончания (БО) — Ближайшее время старта плюс время, необходимое для завершения задачи.\r\nПоследнее время окончания (ПО) — Финальный момент, когда все активности завершены без переносов сроков задач.\r\nПоследнее время начала (ПН) — Последнее время окончания минус время, требуемое для завершения задачи.\r\n\r\nРезервное время — это время между ближайшим и последним временем старта, или между ближайшим и последним временем окончания проекта. Резервное время — это то время, на которое может быть отложены ближайшее время старта и финиша без движения дедлайнов всего проекта.\r\n\r\nКритический путь — это цепочка через всю сеть задач проекта, в которой ни одна из задач не имеет резервного времени, когда БС=ПН и БО=ПО для всех задач на пути. Перерыв автоматически ведет к сдвигу проекта. Если подводить итог, то чтобы уменьшить длительность проекта, нужно уменьшить время на задачи на критическом пути.\r\n\r\n\r\n\r\nОбновление критического пути\r\nПо ходу проекта становится ясным настоящее время завершения проекта или диаграмму следует обновлять для включения этой информации. Может появиться новый критический путь с новыми дедлайнами и структурными изменениями.\r\n\r\nОграничения критического пути\r\nРазработан для сложных, но достаточно рутинных проектов с возможность минимального изменения времени завершения задач. Для более хаотичных проектов критический путь теряет свою полезность. Альтернатива — модель PERT, которая позволяет менять длительность каждой активности.\r\n\r\nВремя-Затраты\r\nМежду временем завершения проекта и его стоимостью есть взаимосвязь. Кэп. Для некоторых видов затрат эта взаимосвязь прямая. В других типах затраты изменяются за счет других.Для этих двух типов затрат, существует оптимальный шаг времени по минимальной стоимости. Понимая отношение время-стоимость, становится проще вычислить стоимость отсрочек в проекте.\r\n\r\nВиды затрат\r\nЗатраты проекта классифицируются как прямые и непрямые.\r\n\r\n\r\nПрямые затраты — это все то, что непосредственно связано с работой проекта, как зарплаты, командировки, материалы и оборудование. Если этих ресурсов требуется все больше в целях уменьшения времени завершения проекта, значит, прямые затраты вырастают.\r\nНепрямые затраты — это накладные расходы, не связанные напрямую с задачами проекта, такие как аренда офиса, административные персонал, налоги. Такие расходы обычно не меняются значительно в течение времени проекта. Обычно такие затраты возрастают из-за увеличения длительности проекта.\r\n\r\nСжатие графика выполнения проекта\r\nУменьшение или вовсе поломка графика выполнения проекта используется для ускорения работ проекта для завершения его хода в более ранний срок. Время, требуемое для завершения проекта, определяется критическим путем, поэтому, чтобы уменьшить время всего проекта, нужно в первую очередь сосредоточиться на задачах критического пути.\r\n\r\nПроцесс определения оптимального времени проекта состоит из вычисления нормального (среднего) времени выполнения каждой задачи на критическом пути и экстремального времени. Экстремальное время — это наименьший срок, требуемый для завершения задачи. Прямые затраты подсчитываются и на задачи, выполняемые в нормальном и экстремальном времени. Коэффициент показывает затраты на единицу времени каждой конкретной задачи. Он показывает сколько будет стоить ускорение выполнения каждой задачи:\r\n\r\nСтоимость = (Экстремальные затраты — Оптимальные затраты) / (Оптимальное время — Экстремальное время)\r\n\r\nТе задачи, которые имеют наименьшую стоимость в единицу времени должны быть сокращены в первую очередь. Таким образом, следует пройтись по пути и подсчитать общее отношение затрат проекта к времени проекта. Непрямые, прямые и общие затраты могут быть подсчитаны для различной длительности проекта. \r\n\r\nОптимальная стоимость проекта — это точка, которая будет находиться в самой нижней части суммарной стоимостной кривой.\r\n\r\nЗатраты проекта по отношению к длительности\r\nСледует уделить внимание критическому пути после того, как длительности задач будут сокращены. Если появится новый путь, следует подумать о новых сокращениях времени.\r\n\r\n\r\n\r\nЧтобы минимизировать затраты, задачи, которые не лежат на критическом пути, могут быть расширены без увеличения продолжительности их выполнения.\r\n\r\nДопущения в модели Время-Затраты\r\nМодель время-затраты может быть описана на основе следующих допущениях:\r\n\r\nОптимальные затраты на задачу ниже экстремальных затрат.\r\nМежду временем задачи и ее стоимостью существует линейная зависимость.\r\nДоступны ресурсы для уменьшения длительности задачи.\r\n\r\nВ случае, если эти допущения не могут быть реализованы, модель следует адаптировать. Например, в графике выполнения задач следует принять во внимание о том, что стоит нивелировать нагрузку на ограниченные ресурсы, такие как специализированное оборудование.\r\n\r\nДополнительные суждения\r\nЕсть и другие точки зрения относительно затрат проекта. Например, если проект является частью разработки нового продукта, время выхода на рынок может стать очень важным. И может быть выгодным ускорение темпов проекта к точке, когда затраты будут намного выше минимальных.\r\n\r\nВ работе по контракту, могут рассматриваться дополнительная оплата как вознаграждение за раннее окончание работ или штрафы за отставание. Такие вознаграждения и штрафы можно отнести к непрямым затратам.\r\n\r\nПоскольку критически путь чрезвычайно важен в уменьшение сроков выполнения проекта, такие техники планирования, как критический путь или PERT, могут быть использованы перед тем, как сокращать график выполнения проекта."}


{"name": "Релиз Webix 3.2. Новые виджеты для работы с данными и прочие фичи", "article": "\r\n\r\nСледуя традиции выпускать новые версии библиотеки с завидным постоянством, разработчики Webix сообщили о выходе регулярного весеннего релиза, на этот раз за номером 3.2. Среди нововведений в этой версии были замечены два новых виджета: SpreadSheet, который, как видно из названия, служит для создания экселеподобных таблиц, а также RangeChart, позволяющий выбрать для отображения определенный участок большого графика. Помимо этого, были добавлены новые возможности, позволяющие расширить функционал уже имеющихся компонентов. \r\n\r\nНо обо всем по порядку.\r\n\r\n\r\nSpreadSheet Widget \r\nДля того, чтобы использовать этот виджет, помимо js- и css-файлов, необходимых для работы Webix, нужно добавить файлы, требуемые для работы непосредственно со SpreadSheet. \r\n\r\nВот как это можно сделать:\r\n\r\n&lt;script src=\"codebase/webix.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"codebase/webix.css\"&gt;\n\n&lt;script src=\"codebase/spreadsheet.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"codebase/spreadsheet.css\"&gt;\n\r\nПосле этого можно создать виджет. Вот минимальное количество кода, необходимое для этого:\r\n\r\nwebix.ready(function(){\n    webix.ui({\n        view:\"spreadsheet\"\n    });\n});\r\n\r\nРезультат вы можете увидеть на скриншоте:\r\n\r\n\r\n\r\nНичего необычного, если вы имели хоть какой-то опыт работы с офисными пакетами. Есть возможность форматирования шрифта, настройки ячеек и выбора формата отображаемых данных: Common, Currency, Number и Percent:\r\n\r\n \r\n\r\nНемного странным показалось то, что по умолчанию не работают математические формулы. Чтобы их включить, нужно использовать отдельное свойство. Формулы нам понадобятся почти наверняка, так что давайте заодно посмотрим на другие доступные свойства:\r\n\r\nview:\"spreadsheet\",\n/* возможность ресайзить ячейки */\nresizeCell:true,\n/* включаем математику */\nmath: true,\n/* выбираем количество отображаемых столбцов и строк*/\ncolumnCount:10,\nrowCount:20,\n/* загружаем данные из массива */\ndata: base_data\n\r\n\r\nТакже есть возможность включения режима ридонли с помощью readonly:true и добавления новых полей в тулбар. Например, можно добавить текстовое поле для более удобного редактирования формул:\r\n\r\n\r\n\r\nДанные таблицы хранятся в формате JSON. Помимо загрузки и сохранения данных, присутствует возможность экспорта в форматы Excel, PDF и PNG. Также можно импортировать данные из Excel-файла. \r\n\r\nВиджет можно кастомизировать на свое усмотрение. Есть возможность конфигурации тулбара, в который можно добавлять свои панели и кнопки. В таблицу можно добавить собственное контекстное меню, есть возможность локализации и обработки событий. \r\n\r\nРуководство по API, демки и обзор виджета можно найти на странице документации. \r\n\r\nСтраница загрузки предлагает скачать виджет отдельно или в составе enterprise-пакета.\r\n\r\nRangeChart Widget\r\nЭтот виджет будет полезным при построении графиков, основанных на большом количестве данных. Например, у вас есть некоторая выборка за большой период времени и вы хотите отобразить ее в виде графика с возможностью выбора нужного промежутка. Лучше всего рассмотреть небольшой пример. \r\n\r\nДопустим, у нас есть массив data, в котором хранятся данные о продажах за определенный период. Вот как мы могли бы построить график:\r\n\r\n/* нам нужен график типа line */\nview:\"chart\", \nid:\"dchart\",\ntype:\"line\",\n/* отображаемые данные и их источник */\ndata: data,\nvalue:\"#sales#\",\nxAxis:{ template:\"#time#\" },\nyAxis:{},\nitem:{\n    borderColor: \"#1293f8\",\n    color: \"#ffffff\"\n}\r\n\r\nПоскольку данных немало, в итоге получится что-то вроде этого:\r\n\r\n\r\n\r\nПользы от такого графика никакой. И именно здесь на помощь приходит RangeChart. Он управляет тем, что отображается на графике, а значит код, приведенный выше никуда выкидывать не нужно. Можно только убрать из него строку data: data, потому что теперь данные будет извлекать RangeChart. \r\n\r\nДобавить его на страницу можно так:\r\n\r\nwebix.ui({\n    rows:[\n        {\n            view:\"chart\", \n            id:\"dchart\",\n            /* все по-прежнему */\n        },\n        {\n            /* все как в графиках */\n            view:\"rangechart\", \n            height: 80, \n            id:\"range\",\n            type:\"line\",\n            value:\"#sales#\", \n            padding:0,\n            item: { radius :0 },\n            data:  data,\n            /* настройка RangeChart*/\n            frameId:\"time\",\n            range:{ start:30, end:50 }\n            /* обновить график при изменении RangeChart */\n            on: {\n                onAfterRangeChange:function(){\n                    $$(\"dchart\").clearAll();\n                    $$(\"dchart\").parse(this.getFrameData());\n                }\n            },\n        }\n    ]\n});\r\n\r\nСвойства RangeChart почти не отличаются от таковых для всех других чартов. На что стоит обратить внимание, так это на свойство frameId, которое определяет, каким параметром из массива данных будет управлять RangeChart (в данном случае – менять шкалу времени), а также свойство range которое определяет диапазон выбранных данных. Свойство on позволяет добавить к компоненту обработчик. В данном случае, при изменениях в RangeChart мы сначала очищаем график, используя его id, а затем отрисовываем новые данные. Вот что мы получили в итоге:\r\n\r\n\r\n\r\nМожно двигать рамку и менять ее масштаб для просмотра разных частей исходного графика. Поиграть с кодом можно на этой странице.\r\n\r\nRangeChart можно использовать с любыми графиками Webix, которые имеют горизонтальное расположение. Подробнее узнать о том, как его использовать и посмотреть демки можно на странице документации. \r\n\r\nПрочие полезности: Undo, экспорт в PDF, свойство areaselect для дата-виджетов\r\nТеперь давайте поговорим о новых возможностях, появившихся в последней версии библиотеки.\r\n\r\nUndo для дата-компонентов\r\nСвойство undo доступно для всех дата-компонентов и позволяет отменить изменения в случае, если сервер вернул сообщение об ошибке. \r\n\r\nМожно рассмотреть, как всё это работает на простом примере, в котором есть кнопка, которая отменяет изменения, внесенные в список:\r\n\r\nwebix.ui({\n    /* ряд из двух компонентов: список и кнопка */\n    rows:[\n        {\n             view: \"editlist\", \n             id: \"myList\",\n             undo: true,\n             /* ... */    \n        },\n        {\n            view:\"button\",\n            value:\"Undo\",\n            click:function(){\n                $$(\"myList\").undo();\n            }\n        }\n    ]\n});\r\nНасладиться результатом можно здесь.\r\n\r\nКак вы заметили, помимо свойства undo: true мы также использовали метод undo(). Методов, позволяющих пользоваться описанным функционалом всего три:\r\n\r\n\r\nundo() отменяет изменения компонента. Вызов этого метода отменяет только самое последнее изменение. Если вы хотите отменить все изменения и вернуть компонент к его первоначальному состоянию, нужно передать методу значение свойства id этого элемента\r\nremoveUndo() удаляет историю изменений компонента. В качестве параметра приминает id\r\nignoreUndo() принимает в качестве параметра функцию, которая будет игнорироваться при отмене изменений с помощью undo().\r\n\r\nСтраница документации с более подробным описанием доступна здесь. \r\n\r\nЭкспорт в PDF\r\nДля экспорта данных из дата-виджета в PDF-файл теперь можно использовать метод toPDF(). \r\n\r\nНапример, у нас имеется компонент List и мы хотим добавить кнопку экспорта. Код будет выглядеть примерно так:\r\n\r\nwebix.ui({\n    rows:[\n        {\n            view:\"list\", \n            id:\"myList\",\n            /* ... */\n        },\n        {\n            view:\"button\",\n            value:\"Export to PDF\",\n            click:function(){\n                webix.toPDF($$(\"myList\"));\n            }\n        }\n    ]\n});\r\nЕсли же мы хотим экспортировать не всю таблицу целиком, а только некоторые столбцы:\r\n\r\nclick:function(){\n    webix.toPDF($$(\"myList\"),{\n        columns:{\n            \"title\": true,\n            \"rank\":true\n        }\n  });\n}\r\nТакже можно задать собственные заголовки, ширину полей, шаблон для экспортируемого файла, и т.д.\r\n\r\nБолее подробное описание этой функции с примерами можно найти на странице документации.\r\n\r\nПопробовать в деле можно здесь.\r\n\r\nСвойство areaselect \r\nИтак, последнее значительное нововведение. Свойство areaselect доступно для компонентов DataTable и TreeTable. Оно включает возможность выделения группы ячеек в стиле Excel и перекочевало в эти виджеты из уже знакомого нам SpreadSheet. Его можно комбинировать со свойством multiselect, которое, как видно из названия, позволяет выделять несколько областей. \r\n\r\nРаботает все довольно просто:\r\n\r\nwebix.ui({\n    view:\"datatable\",\n    /* ... */\n    areaselect:true, \n    multiselect: true,\n});\r\nПосмотреть, что из этого вышло можно на этой странице.\r\n\r\nДоступны также четыре метода, которые позволяют работать с выделенной областью:\r\n\r\n\r\naddSelectArea() позволяет добавить выделенную область. Три обязательных параметра определяют левый верхний и правый нижний элементы таблицы, а также то, будет ли удалена предыдущая выделенная область. Можно также задать имя для выделенной области, чтобы можно было, например, удалить или изменить выделенные данные, использовать CSS для оформления рамки и т.п.\r\nremoveSelectArea() удаляет выделенную область. Можно передать имя конкретной области в качестве параметра\r\ngetSelectArea() возвращает выделенный объект. Опять же, можно использовать имя выделенной области\r\ngetAllSelectAreas() следует использовать, если вы указали свойство multiselect: true. В этом случае можно получить все выделенные области разом\r\n\r\nПодробно почитать о том, как работает эта фича, а также посмотреть примеры кода можно на странице документации.\r\n\r\nЗаключительное слово \r\n\r\nРазработчики выпускают новые релизы на регулярной основе, при этом не ограничиваясь только багфиксами, которых, к слову, в этом релизе также было немало. Новые возможности кому-то покажутся интересными, а кому-то нет. Некоторые из низ доступны для всех, а некоторое – только для обеспеченных господ в составе PRO-версии. В любом случае, нелишним будет обратить внимание на новые возможности этой библиотеки."}


{"name": "Преимущества Иерархической Структуры Работ (WBS) для менеджеров ИТ проектов", "article": "Имеющие дело со сложными ИТ проектами руководители подтвердят, что разделение задач на более мелкие и управляемые части делает рабочий процесс намного проще. В этой статье расскажу о процессе, который поможет структурировать каждый этап проекта и учитывать все поставленные задачи. Речь идет об иерархической структуре работ WBS (Work Breakdown Structure).\r\n\r\n\r\n\r\nЕсли вы помните, как использовать Agile-методологию управления проектами, определять критический путь и ставить SMART-цели, то пришло время перейти к новому уровню компетенции в управлении проектами. \r\n\r\nЧто такое иерархическая структура работ WBS?\r\nИерархическая структура работ WBS, или структура декомпозиции, представляет собой схему, где задачи проекта отражают их отношение друг к другу и к проекту в целом. Термин был впервые употреблен в США в 1993 году.\r\n\r\nWBS основана на графической природе, которая помогает менеджерам проектов предсказать результаты, основанные на различных сценариях. Процесс часто описывается как структура ответвления, которая охватывает все этапы проекта в организованном порядке. WBS также может быть представлена в виде табличного списка задач и элементов в плане разбивки работ диаграмм Ганта.\r\n\r\nМенеджеры используют структуру декомпозиции, чтобы структурировать и делить проекты на легко управляемые компоненты. Они, в свою очередь, разделяются до тех пор, пока они не назначаются конкретному специалисту в команде.\r\n\r\nПочему стоит использовать WBS: \r\n\r\nПомогает правильно организовать проекты;\r\nОказывает помощь в описании содержания проекта для заинтересованных сторон;\r\nПомогает распределить обязанности;\r\nПоказывает основные этапы проекта и все ракурсы контроля;\r\nПозволяет правильно оценить затраты, риски и время работ.\r\n\r\nРазберем WBS на примере планирования какого-нибудь мероприятия. Предположим, есть задача — организовать и курировать корпоративной пикник или тимбилдинг. Используя WBS, можно описать и разделить задачи следующим образом:\r\n\r\nПланирование: исследование, планирование бюджета, согласование и утверждение плана, вопросы координации.\r\nПитание: меню, закупки, приготовление пищи, обслуживание.\r\nПлощадка и активности: столы и посадочные места, посуда, декорирование и оборудование, брендинг.\r\nУчастники/гости: приглашения, список гостей, особые случаи.\r\nПерсонал: водители, повар, официанты, уборщики.\r\nХедлайнер: приглашение, вопрос логистики, согласование сценария/ плей-листа.\r\n\r\n\r\n\r\nКомпоненты WBS\r\nСогласно иерархической структуре, необходимо пройти несколько этапов (компонентов) для того, чтобы оптимизировать и упростить процесс управления:\r\n\r\n\r\nУтверждение концепции проекта;\r\nЭтапы, которые зависят от размера проекта;\r\nЗадачи с промежуточными результатами.\r\n\r\nЭти компоненты могут иметь разные названия в зависимости от компании.\r\n\r\n5 шагов для разработки простой структуры WBS\r\n\r\nЧтобы достичь целей проекта, необходимо следовать определенному плану выполнения WBS.\r\n\r\nНачните с концепции проекта и утверждения главных моментов в верхушке иерархии. Определите все необходимые задачи, от которых будут зависеть результаты. В идеале, в процесс планирования и определения концепции должны быть вовлечены усилия всей команды. Тем не менее, каждый специалист должен отвечать за выполнение конкретной задачи.\r\n\r\nИтак, шаги:\r\n\r\n1. Утвердите и распишите проект\r\nЭто может быть просто предложение или абзац, описывающий концепт и функции проекта после завершающей стадии. Эта стадия WBS представляет собой основу любого проекта и, как правило, разрабатывается всей командой.\r\n\r\n2. Выделите все ключевые этапы\r\nПосле того, как первый этап завершен, можно приступать к следующим.\r\nМожет быть, вам придется делить задачу на множество этапов в зависимости от характера вашего проекта. Как правило, это зависит от требований, возможностей бюджета и временных рамок.\r\n\r\n\r\n3. Определите конечные результаты\r\nСформулируйте для себя все моменты, которые должны быть завершены в течение каждого этапа. Все они должны иметь конечные результаты. Вы должны их достичь полностью, прежде чем перейти к следующему этапу. Каждый конечный результат также должен иметь свое описание, цели и функции.\r\n\r\n4. Разделите конечные результаты на управляемые задачи\r\nПосле создания списка конечных результатов добавьте еще один уровень иерархии для расчета деталей. Задачи проекта должны быть выполнены в виде секций. Любой член команды или небольшая команда будет иметь возможность легко управлять ими.\r\n\r\n5. Распределите задачи\r\nНазначение ответственного за каждую часть работ является последней стадией иерархии. Конкретный специалист будет отвечать за конкретную задачу. Он/она будет участвовать в каждом этапе работы, что приведет к качественным результатам.\r\n\r\nВ видео показан легкий способ создания WBS.\r\n\r\n\r\nКто может использовать WBS?\r\nКак правило, менеджеры используют структуру при разработке коммерческих, жилищных и строительных проектов. С ней инвесторам и клиентам проще понять, что и как происходит в развитии проекта.\r\n\r\n\r\n\r\nРазработчики ПО тоже сперва утверждают концепции и создают требований на ее основе. Это придает WBS черты идеального инструмента для разработки.\r\n\r\nЕсли попробовать классифицировать команды, которые могут использовать инструменты WBS, получим такой список:\r\n\r\n\r\nТворческие группы. Творческие люди ценят структуру за возможность вместе организовывать мозговой штурм. \r\n\r\n\r\nТехнические команды. Технически ориентированные специалисты выбирают WBS за аналитическую перспективу охвата работ и их прогрессирование.\r\n\r\n\r\nКоманды, которые работают непосредственно с клиентами. Иерархическая структура работ хороша для специалистов, разрабатывающих программное обеспечение для клиентов, поскольку она отвечает их потребностям. А еще она помогает повысить уверенность клиента в вашей команде.\r\n\r\n\r\nВнутренние проекты команд.\r\n\r\n\r\nУдаленные команды.\r\n\r\nПреимущества структуры WBS для менеджеров ИТ проектов\r\nСтруктура WBS стала популярной и широко используемой в разработке программного обеспечения благодаря ее очевидным преимуществам. Руководители проектов смело ее применяют. И вот почему:\r\n\r\n1. Усиление коммуникации в команде проекта\r\nНеважно, имеет ли ваш ИТ проект внутреннюю или внешнюю направленность. Иерархическая структура работ включает в себя коммуникационные акты на каждом шагу.\r\n\r\n2. Поле для творчества\r\nПохоже на стереотип, но люди думают, что разработка программного обеспечения – это только аналитическая работа. Нет, здесь еще есть пространство для развития творческих способностей. При определении концепции проекта члены команды могут использовать WBS и предлагать творческие идеи для развития проекта.\r\n\r\n3. Фокусировка на конечных целях\r\nWBS помогает держать всю команду в фокусе и сосредоточенной на конечной цели. Это сводит к минимуму вероятность выполнения ненужной работы.\r\n\r\n4. Детализация\r\nКаждая деталь тщательно рассматривается, поэтому в проекте ничего не теряется.\r\n\r\n5. Предвидение появления проблем\r\nКогда проект будет готов, могут возникнуть непредвиденные проблемы. Иерархическая структура работ помогает сократить их число, поскольку все детали учитываются перед выполнением.\r\n\r\n6. Коллективный мозговой штурм\r\nМенеджеры используют структуру для мозгового штурма, чтобы найти полезные идеи и решения. С ее помощью их легко собрать, а затем из них вычеркивать ненужные.\r\n\r\n7. Вопросы планирования\r\nС помощью WBS легко определить, какие из запланированных задач отстают от графика.\r\n\r\n8. Управление рисками\r\nЕсли вы используете WBS, вы уменьшаете риски и управляете ими с самого начала. Это помогает распределить все ресурсы: денежные средства, время и трудозатраты.\r\n\r\n9. Распределение задач\r\nКогда вы структурировали свой проект, становится легче назначать задачи конкретным людям.\r\n\r\n10. Гибкость для различных команд\r\nИерархическая структура работ используется в различных сферах. Не имеет значения, сколько людей в команде: WBS всегда будет поддерживать процесс выполнения проекта. Она также может стать отличным инструментом для привлечения клиентов, так как показывает процессы изнутри и помогает их лучше понять.\r\n\r\nWBS + диаграмма Ганта = улучшенный процесс планирования\r\nДля отображения иерархической структуры работ широко распространена практика применения диаграмм Ганта. Именно они четко отображают всю структуру, причем в очень удобном виде. Диаграммы Ганта используются во многих программах и сервисах для управления проектами, таких как GanttPRO, MS Project, Wrike и т.д.\r\n\r\nВот, как это выглядит на примере GanttPRO.\r\n\r\n\r\n\r\nДиаграмма Ганта позволяет расширить функционал иерархической структуры работ. Так, благодаря ей четко видны сроки начала и окончания задачи, ее полная протяженность, кто ее выполняет, каков прогресс выполнения, зависимости между задачами. Кроме того, можно обозначить вехи — важные события, влияющие на проект, а также критический путь.\r\n\r\nОнлайн диаграмма Ганта подходит и для управления командой проекта. Под каждой задачей можно оставлять комментарии, прикреплять файлы, делиться самим графиком, экспортировать его в популярные форматы, просматривать историю изменений — командная работы действительно удобна. Впрочем, как и отслеживание других процессов, связанных с управлением проектами.\r\n\r\nПодведем итоги\r\nИерархическая структура работ — распространенный и удобный способ планирования ИТ и любых других проектов. А если отобразить ее диаграммой Ганта, то в таком виде она значительно упрощает процесс не только планирования, но и управления. С ней можно:\r\n\r\n\r\nСтавить задачи и распределять их между участниками;\r\nЗадавать сроки выполнения задач, их продолжительность, прогресс;\r\nУстанавливать зависимости между задачами;\r\nВизуализировать важные ключевые события — вехи;\r\nОпределять критический путь;\r\nВзаимодействовать с командой.\r\n"}


{"name": "Как довести проект до ума с помощью PERT-диаграмм", "article": "Если вы читаете этот материал – на это, вероятно, есть две причины:\r\n\r\n— Вы ищете оптимальное решение управления проектом, который нужно завершить к определенному сроку.\r\n— Вы ищете определение аббревиатуры PERT.\r\n\r\nВ любом случае, вы находитесь в правильном месте. Мы хотим поделиться основными преимуществами техники оценки и анализа проектов и выяснить, что же из себя представляет PERT.\r\n\r\n\r\n\r\nЧто такое техника оценки и анализа проектов PERT?\r\nДиаграмма PERT — это многоцелевой инструмент в управлении проектами, который графически отображает сроки и ход задач проекта.\r\n\r\nPERT (от англ. Program Evaluation Review Technique) — техника, которая помогает определить и проанализировать задачи и цели. Многие компании по всему миру используют эту технику управления временем, чтобы ускорить и улучшить свои бизнес-процессы.\r\n\r\nФормула диаграммы PERT была разработана и описана в 1958 году по заказу подразделения специальных проектов ВМС США для проекта создания ракетной системы.\r\n\r\nЭти диаграммы состоят из кругов или прямоугольников (узлов), которые представляют собой ключевые вехи в рамках проекта. Линии или векторы, которые определяют различные задачи соединяют узлы.\r\n\r\n\r\n\r\nКогда стрелка рисуется от задачи А к задаче B, то это означает, что задача А должна быть обязательно завершена до начала задачи B. Вы можете создать параллельные задачи, которые могут быть расположены на той же стадии, но на разных линиях задач. Они не должны зависеть друг от друга.\r\n\r\n\r\nЭлементы техники оценки и анализа проектов PERT\r\nДиаграмма представляет события, которые должны быть реализованы в рамках хода проекта.\r\n\r\n\r\nСтрелки показывают направления и указывают на потоки событий, которые должны произойти.\r\nПунктирные линии представляют собой фиктивные активности, которые являются элементами, расположенными на другом пути.\r\nНомера, присвоенные каждой задаче, регулируют их.\r\n\r\nКак правило, диаграмма содержит горизонтальный график с подразделениями (дни или недели). \r\n\r\nПоследовательные шаги по созданию диаграммы PERT\r\n\r\nСоставьте список уровней и этапов проекта, определите время, необходимое для завершения каждого события.\r\nДобавьте зависимости для создания связи между событиями.\r\nЛинии покажут время, которое занимает каждое событие. \r\nКаждая линия на диаграмме должна прийти к шагу, который связан с завершением события.\r\n\r\nДиаграмма также отображает критический путь с последовательностями задач, которыми необходимо тщательно управлять, чтобы закончить все цели вовремя.\r\n\r\nПримеры и шаблоны техники PERT\r\nЧтобы понять, как это работает, вы можете выбрать любой шаблон диаграммы техники оценки и анализа и рассмотреть ваш случай на нем. Например — шаблон, созданный с помощью программы Edraw Max:\r\n\r\n\r\nЗдесь можно создавать четкие графики, используя встроенные элементы символов. Этот шаблон состоит из легенды, двух форм задач, соединителей и выводов.\r\n\r\nВот пример иллюстрации диаграммы, составленной по технологии PERT, который демонстрирует как с помощью диаграммы разбить сад: \r\n\r\n\r\n3 программы для создания диаграмм в технике оценки и анализа PERT\r\nМы подобрали примеры трех инструментов, которые помогут построить PERT-даиаграммы.\r\n\r\nSmartDraw\r\nВ программе можно найти полный набор функций и вариантов дизайна для реализации ваших задач. Она подходит для Windows, Mac и Android и позволяет использовать десятки шаблонов PERT-диаграмм для выполнения общих задач. Вы можете выбрать один из примеров, схожих с вашим проектом и адаптировать его. \r\n\r\n\r\nLucidchart\r\nLucidchart также доступна на Mac или Windows. Сервис предлагает неограниченный выбор настроек и мощных возможностей использования. Здесь вы можете найти развернутое описание PERT-диаграмм и библиотеку Lucidchart для работы с техникой оценки и анализа проектов. \r\n\r\n\r\nEdraw max\r\nВ этой программе также легко создать профессиональную диаграмму PERT. С помощью удобных инструментов сервиса можно создать онлайн-диаграммы для задач, графики работы, метод критического пути, работать с иерархией задач по структуре WBS, и др. \r\n\r\n\r\nПроектные графики PERT: плюсы и минусы\r\nПреимущества графиков PERT очевидны, но менеджеры проектов должны также обратить внимание на некоторые недостатки, которые могут стать препятствием для реализации проектов.\r\n\r\nПреимущества технологии PERT для менеджеров проектов:\r\n\r\n\r\nС помощью диаграмм, менеджеры проектов могут оценивать и анализировать время и ресурсы, необходимые для проекта.\r\n\r\n\r\nДиаграммы дают возможность отслеживания и управления активами, необходимыми на любой стадии производства.\r\n\r\n\r\nАнализ графиков содержит данные и информацию из различных департаментов. Это помогает оптимизировать коммуникации во время хода проекта, определить ответственные стороны в рамках компании и распределить ответственность.\r\n\r\n\r\nТехника помогает менеджерам сделать анализ «что-если». Такой анализ выявляет возможности и неопределенные моменты, связанные с проектом и помогает свести к минимуму неприятные сюрпризы и утраты. «Что-если» также выдвигает на первый план все рискованные события и этапы, которые требуют тщательного анализа и мониторинга в ходе реализации проекта.\r\n\r\nВот, к примеру, преимущественные отличия PERT от метода критического пути CPM:\r\n\r\n\r\nНекоторые недостатки PERT:\r\n\r\nМетод PERT требует расположения активностей во временной последовательности. Процесс анализа носит субъективный характер, именно поэтому эти схемы не могут точно оценить стоимость и время.\r\n\r\nТехнология определяет потребности в рабочей силе и материально-техническом оснащении для видов активностей в проекте. Тем не менее, PERT — это прежде всего метод, сфокусированный на работе с временем.\r\n\r\nМетод требует детального исследования и изучения замечаний от многих людей.\r\nPERT считается достаточно дорогой техникой из-за трудоемкого характера работ.\r\n\r\nОтличия диаграмм PERT от диаграмм Ганта\r\nГрафики и диаграммы, специальные программы и приложения – это только лишь инструменты, которые помогают вам управлять своими проектами и делать их лучше. Но вы должны всегда быть готовыми применить актуальные и новые варианты для достижения максимальных результатов. \r\n\r\nДиаграммы Ганта и диаграммы PERT являются полезными инструментами для визуализации целей и задач. Обе структуры могут быть созданы с помощью программных приложений. Выбор за вами, многое зависит от специфики проекта. \r\n\r\nОсновное отличие этих инструментов – в способе демонстрации и отображения информации.\r\n \r\nУправление проектами с диаграммами Ганта основано на формате гистограмм. Это помогает отслеживать процент работ, выполненных по каждой задаче. PERT предлагает сетевую модель.\r\n\r\n\r\nРуководителям проектов очень важно правильно распределить задачи и быть уверенными в том, что проект будет завершен к сроку. Основное внимание диаграмм Ганта сосредоточенно на процентном завершении каждой задачи. Техника PERT не предоставляет такие данные. По этому показателю, Gantt-диаграммы выглядят более убедительными.\r\n\r\nКроме того, диаграммы Ганта предпочтительнее для проектов с небольшим количеством взаимосвязанных задач.\r\n\r\nРезюмируя все вышесказанное, хотим отметить что диаграммы, составленные по технологии оценки и анализа проектов PERT могут стать эффективным инструментом в вашей деятельности. Лучше всего сравнить их с более популярными диаграммами Ганта и выбрать для своих проектов лучший вариант."}


{"name": "43 полезных сервиса для управления проектами. Без эпитетов", "article": "Дано: собственные и аутсорс-проекты, некоторые участники работают удаленно.\r\n\r\nТребуется: необходимо быстро назначать задачи исполнителям, планировать спринты, трекать выполнение и статусы, визуализировать процессы и делиться результатами с заказчиками.\r\n\r\nВыбирая для себя сервисы, с помощью которых мы могли бы работать над проектами в несколько раз эффективнее, у нас сложился целый список различных сервисов таск- и тайм-менеджмента, для управления и планирования проектов, командной работы, построения онлайн диаграмм и т.д.\r\n\r\nИзначально сервисов было более 100, но постепенно список сокращался, и мы остановили наш выбор на трех, удовлетворяющих вместе наши нужды лучше всего: Jira, Slack и GanttPro. Но, если вдруг эти сервисы не помогут вам в планировании задач и работы с командой, делюсь с вами полным списком:\r\n\r\nПроцесс поиска очень часто усложняется тем, что все сервисы, как один, пишут «Лучший сервис, помогающий превратить ваши идеи в реальность и реализовать ваши проекты. Сегодня.». Так, а что вы делаете-то? Поэтому в этом списке без лишних эпитетов, только что какой сервис умеет. :)\r\n\r\n\r\n\r\n\r\n\r\n1. Jira – мощный онлайн сервис, позволяющий командам-разработчикам планировать проекты, назначать исполнителей задач, планировать спринты и собирать задачи в бэклог, выставлять приоритеты и дедлайны.\r\n\r\n\r\n\r\nЧто для нашей команды стало плюсами: \r\n\r\n• Drag&amp;Drop для перетаскивания задач в бэклоге, в спринте.\r\n• Большое количество настроек фильтрации.\r\n• Визуализация — позволяет быстро ориентироваться и делать изменения в спринте.\r\n• Возможность выбора причин для закрытия задач.\r\n• Детальные отчеты.\r\n• Простота в управлении проектами.\r\n• Простой и удобный трэкер времени.\r\n\r\nЧто для нашей команды стало минусами:\r\n\r\n• Из-за огромного количества настроек, очень тяжело и долго приходится в них разбираться, зачастую трудно просто найти ответ на интересующий вопрос, FAQ недостаточно детально описывает пути решения проблем.\r\n• Нет возможности назначения нескольких исполнителей для 1 задачи.\r\n• Применение определенных настроек для фильтров, которые будут полезными для команды, может заблокировать уже используемые настройки.\r\n\r\n2. Slack – web-сервис (также доступны приложения для десктопа, iOS и Android) для создания чатов и отдельных групп для ведения обсуждений с командой, клиентами или пользователями.\r\n\r\n\r\n\r\nЧто для нашей команды стало плюсами: \r\n\r\n• Простота и быстродействие приложения (Slack выбирался как альтернатива Skype).\r\n• Кросс-платформенность: можно использовать с любого устройства.\r\n• Возможность создания отдельных групп.\r\n• Быстрый обмен файлами.\r\n• Быстрый поиск сообщений.\r\n• Бесплатен до тех пор, пока вы не превысите лимит в сообщениях.\r\n\r\nЧто для нашей команды стало минусами:\r\n\r\n• Все основные особенности разбросаны и спрятаны в дроп-даунах.\r\n• Нет возможности кастомизировать интерфейс.\r\n• Нет возможности отключить уведомления.\r\n\r\n3. GanttPro – диаграмма Ганта, позволяющая планировать и управлять проектами онлайн, визуализировать процессы, создавать задачи и назначать их участникам, выставлять дедлайны и процент завершения отдельных задач и проекта в целом, добавлять вехи, а также делиться созданным графиком Ганта с командой и с клиентами с правом просмотра или редактирования.\r\n\r\n\r\n\r\nЧто для нашей команды стало плюсами: \r\n\r\n• Наличие автоматического планирования проектов.\r\n• Добавление файлов к существующим онлайн диаграммам с возможностью комментирования.\r\n• Drag&amp;Drop для перетаскивания задач, выставления процента выполнения и т.д.\r\n• Возможность выставлять собственные рабочие дни и часы для более качественного управления проектами.\r\n• Автоматический пересчет длительностей задач и проектов.\r\n• Выставление зависимостей между задачами.\r\n• Возможность создания сложных, многоуровневых проектов.\r\n• Назначение ролей членам команды и прав доступа. \r\n• Хорошая поддержка пользователей.\r\n\r\nЧто для нашей команды стало минусами:\r\n\r\n• Нет возможности выставить приоритеты задач.\r\n• Отсутствие интеграции с Jira и Slack.\r\n• Отсутствуют уведомления.\r\n\r\n4. Redbooth – web-сервис, доступный также на iOS и Android, позволяющий отслеживать ошибки, планировать проекты и активности, управлять ресурсами и ставить задачи участникам проекта, устанавливать дедлайны и вехи проекта, следить за расходами проекта. Также сервис предлагает делиться файлами и синхронизацию с Google Drive, Gmail и Outlook.\r\n\r\n\r\n\r\nОтзывы за: простой и интуитивный интерфейс; возможности чата; интеграции с другими сервисами; тэги для задач; возможность создания отчетов.\r\n\r\nОтзывы против: нет выставления процента выполнения задач и слежения за прогрессом проекта в целом; нет возможности выставления приоритетов задач.\r\n\r\n5. Basecamp – один из самых популярный онлайн-сервисов для совместной работы над проектами, позволяющий делиться документами, вести обсуждения с командой, создавать to-do листы и добавлять комментарии к задачам, высылать и принимать электронную почту.\r\n\r\n\r\n\r\nОтзывы за: позволяет успешно работать вместе как маленьким, так и большим командам; прост в использовании; наличие мгновенных уведомлений об обновлениях.\r\n\r\nОтзывы против: нет возможностей для тактического и стратегического планирования; не хватает особенностей для отслеживания ошибок; невозможно оценить полную картину по проекту.\r\n\r\n6. Asana – web-приложение, также доступное на iOS и Android, позволяющее назначать задачи, выставлять приоритеты и дедлайны, следить за статусом выполнения задач и статусом проекта в целом.\r\n\r\n\r\n\r\nОтзывы за: простота использования; есть возможность управлять несколькими проектами в рамках одной команды; тэги для задач; анализ эффективности.\r\n\r\nОтзывы против: нет возможности назначать задачи нескольким участникам проекта; невозможно оценить проект в целом; нет импорта/экспорта из/в MS Project.\r\n\r\n7. Trello – популярный онлайн-сервис, позволяющий систематизировать ваши задачи, to-do листы, обсуждения и идеи на одной доске.\r\n\r\n\r\n\r\nОтзывы за: интуитивен; бесплатен, если вы не собираетесь использовать расширения; возможность выставлять приоритеты. \r\n\r\n8. Gemini – приложение, написанное на .NET для управления проектами, включающее систему отслеживания ошибок. Gemini может быть использована как для классического управления проектами, так и в рамках методологий Agile и Scrum.\r\n\r\n\r\n\r\nОтзывы за: полностью кастомизируемый интерфейс.\r\n\r\nОтзывы против: могут возникнуть проблемы при первой настройке; тяжелая документация.\r\n\r\n9. Easy Redmine – Open Source софт для таск-менеджмента, планирования и управления большими проектами с расширениями для управления ресурсами, финансами, CRM и т.д…\r\n\r\n\r\n\r\nОтзывы за: есть возможность установить софт на собственный сервер; отлично подходит для больших команд.\r\n\r\nОтзывы против: нет общей визуализации проектов; неудобная навигация; нет возможности быстро планировать спринты.\r\n\r\n10. Teamweek – web-приложение для создания графиков Ганта, как и GanttPRO. Доступно так же на iOS.\r\n\r\n\r\n\r\nОтзывы за: приятный интерфейс; простота использования; отличная тех поддержка.\r\n\r\nОтзывы против: нет возможности устанавливать зависимости между задачами, процент выполнения и следить за общим прогрессом; нет дедлайнов; нельзя создавать многоуровневые проекты.\r\n\r\n11. Merlin – еще один софт для создания графиков Ганта для Mac OS X с возможностью следить за расходами и бюджетом проекта.\r\n\r\n\r\n\r\nОтзывы за: есть возможность установить софт на собственный сервер.\r\n\r\nОтзывы против: как у большинства приложений для десктопа, низкая мобильность; доступен только для пользователей Mac OS X.\r\n\r\n12. Taskify.us –простое приложения для создания листа задач и управления ими вместе со своей командой по типу Kanban доски.\r\n\r\n\r\n\r\nОтзывы за: бесплатный и не требует регистрации.\r\n\r\nОтзывы против: для такого уровня приложения их нет.\r\n\r\n13. ActiveCollab – как и все сервисы управления проектами, имеет возможность работать над проектами вместе с командой, управлять задачами, следить за прогрессом. Но кроме этого, ActiveCollab предлагает загрузить текущие расходы и инвойсы, позволяя мгновенно оплатить их с помощью PayPal или кредитной карты.\r\n\r\n\r\n\r\nОтзывы за: простота использования; удобная фильтрация задач; возможность упоминать в комментариях участников проекта; совместное написание контента; предлагает решение, которое вы можете установить на собственный сервер. \r\n\r\n14. Zoho Projects – софт для управления проектами, позволяющий планировать проекты вместе с командой, создвать и назначать задачи, следить за одновлениями, создвать отчеты и анализировать эффективности, комментировать и обсуждать задачи и получать саммари обсуждений каждой задачи.\r\n\r\n\r\n\r\nОтзывы за: кроме Zoho Projects, вы можете использовать также Zoho Mail, Zoho CRM, Zoho documents, в зависимости от нужд вашей компании.\r\n\r\nОтзывы против: из-за большого количества фич, пользователи могут просто не найти те, которые им действительно необходимы; начинает тормозить после загрузки файлов.\r\n\r\n15. Freedcamp – сервис представляет собой организованное рабочее пространство для мгновенного просмотра целого проекта, выставления и назначения задач, используя «стикеры» и календарь. Freedcamp предлагает дополнения для CRM, составления инвойсов, баг-трекинга и создания wiki страниц.\r\n\r\n\r\n\r\nОтзывы за: есть возможность выставить приоритеты задачам; можно разделить все проекты на отдельные вкладки; простота использования; быстрая и качественная поддержка пользователей.\r\n\r\nОтзывы против: ваши ожидания от дополнений могут быть завышены; нет возможности выставить прогресс и процент выполнения задач. \r\n\r\n16. ManagePro – приложение для десктопа, включающее в себя основные особенности для управления проектами: диаграмму Ганта, назначение задач, выставление приоритетов выполнения.\r\n\r\n\r\n\r\nОтзывы за: веб-интерфейс в качестве расширения.\r\n\r\nОтзывы против: установка и настройка займут некоторое время; нет возможности сразу начать использовать онлайн версию.\r\n\r\n17. Bitrix24 – сервис, включающий в себя таск-менеджмент, планирование проектов и времени их выполнения, визуализацию информации на календаре, возможность делиться документами, создавать виртуальные рабочие группы и получать уведомления.\r\n\r\n\r\n\r\nОтзывы за: можно использовать как CRM систему; широкие возможности.\r\n\r\nОтзывы против: тяжел в использовании; минимальная визуализация задач и проектов в целом; невозможно кастомизировать: много особенностей, которые вам никогда не понадобятся; дополнительная плата за обновления.\r\n\r\n18. Podio – приложение, позволяющее работать над проектами вместе с командой, управлять проектами и задачами, хранить и обмениваться файлами. Приложение можно использовать как CRM систему, или же интранет, в котором смогут взаимодействовать ваши коллеги.\r\n\r\n\r\n\r\nОтзывы за: гибкость и кастомизируемость продукта; возможность назначать ресурсы и следить за цифрами (бюджетом, расходами и т.д.)\r\n\r\nОтзывы против: неудобная навигация.\r\n\r\n19. Wrike – единая система для работы над проектами вместе с командой с расширенными функциональными особенностями: позволяет назначать роли и создавать рабочее пространство для каждого отдела, ставить и обсуждать задачи, следить за их статусом и прогрессом, делиться файлами, а также отображать задачи проекта на диаграмме Ганта и получать еженедельные отчеты.\r\n\r\n\r\n\r\nОтзывы за: удобен как для больших, так и для маленьких команд; есть возможность создавать отдельные папки для отдельных проектов. \r\n\r\nОтзывы против: создавая разветвленные многоуровневые проекты, можно легко потеряться в навигации.\r\n\r\n20. Smartsheet – ветеран на рынке сервисов для управления проектами. Позволяет создавать графики Ганта для своих проектов, ставить задачи и назначать их участникам проекта, устанавливать дедлайны и следить за ходом выполнения, а также прикреплять файлы и еще миллион всего.\r\n\r\n\r\n\r\nОтзывы за: серьезный инструмент для управления проектами, который стоит рассматривать как долгосрочную инвестицию вашей компании.\r\n\r\nОтзывы против: не подойдет для небольших команд; медленная тех поддержка; чтобы разобраться и начать работать с сервисом, придется потратить немало времени.\r\n\r\n21. Acunote – таск-менеджер для разработчиков, позволяющий планировать спринты, вносить задачи в бэклог, назначать задачи на членов команды, ставить эстимейты, следить за прогрессом выполнения, а также, при необходимости, делать ревью кода.\r\n\r\n\r\n\r\nОтзывы за: одно из самых популярных и надежных SaaS решений для управления задачами; мгновенные уведомления; аналитика эффективности; \r\n\r\nОтзывы против: нет мобильного приложения или оптимизации; UX/UI далеки от “user-friendly”.\r\n\r\n22. ProofHQ – приложение, позволяющее делиться документами / дизайнами / прототипами, комментировать командой и принимать решения вместе, позволять оставлять комментарии клиентам, скачивать разные версии проекта и делиться ими.\r\n\r\n\r\n\r\nОтзывы за: постоянная поддержка приложения, простота использования, возможность обсуждения вместе с командой, интеграция с другими сервисами. \r\n\r\n23. 10,000ft – таск-менеджер, позволяющий создать профиль для каждого участника проекта, работать над проектами вместе с командой, назначать задачи, следить за загруженностью каждого участника. Все на одном листе.\r\n\r\n\r\n\r\nОтзывы за: можно получить полную картину всех задач и всех участников.\r\n\r\nОтзывы против: подойдет только для небольших команд, невозможно указать долгосрочные цели и оценить дату завершения всего проекта.\r\n\r\n24. Insightly – система CRM и управления проектами с интеграцией с Gmail/Google Apps и Outlook 2013/Office365. Позволяет быстро управлять задачами и следить за статусами в рамках отдела маркетинга и продаж.\r\n\r\n\r\n\r\nОтзывы за: простая настройка, добавление контактов и использование системы; есть приложение для iOS; простой приятный интерфейс.\r\n\r\nОтзывы против: не подходит, если ваша работа не завязана на отношениях с клиентами.\r\n\r\n25. Tribe – Web-сервис, позволяющий назначать задачи и следить за статусом их выполнения с помощью электронной почты.\r\n\r\n\r\n\r\nОтзывы за: простота использования; мгновенные уведомления о новых задачах, есть приложения для мобильных устройств.\r\n\r\nОтзывы против: невозможно выставить дедлайны выполнения задач.\r\n\r\n26. WorkingOn – онлайн сервис, позволяющий уведомлять других членов команды короткими постами о задачах и их статусах, над которыми вы сейчас работаете. \r\n\r\n\r\n\r\nОтзывы за: это очень быстро и очень просто.\r\n\r\nОтзывы против: конечно, WorkingOn, отлично справляющийся с задачей мгновенной коммуникации, не сможет стать решением проблемы управления проектами. \r\n\r\n27. Process Street – сервис для управления бизнес-процессами, позволяющий создавать рабочие пространство, ставить задачи и создавать чек-листы и SOP (standard operating procedures), следить за процессами в компании, устанавливать права, планировать активности и управлять проектами вместе с коллегами.\r\n\r\n\r\n\r\nОтзывы против: нет возможности сортировать задачи по датам исполнения и исполнителям, нет возможности выгружать проекты и чек-листы.\r\n\r\n28. SprintGround – сервис Agile/Scrum для таск-менеджера, планирования спринтов и релизов, слежения за прогрессом, работы над проектами вместе с командой, позволяет репортить баги и запросы новых особенностей на основе фидбеков пользователей. \r\n\r\n\r\n\r\nОтзывы за: бесплатен для малого бизнеса, оптимизирован под Agile.\r\n\r\n29. RunMyProcess – в сервисе сделан упор не на целостном приложении для управления проектами и не на интеграции с другими сервисами, а на построении собственных решений, подключении уже используемых сервисов и каналов коммуникаций.\r\n\r\n\r\n\r\nОтзывы за: очень удобно, когда вы не можете найти сервис, удовлетворяющий все нужды вашей компании.\r\n\r\nОтзывы против: несмотря на кажущуюся простоту использования, создание собственного приложения на базе RunMyProcess займет некоторое время.\r\n\r\n30. OneSoft Connect – HR- и таск-менеджер, предлагающий создать профиль для каждого члена команды и управлять задачами, следить за эффективностью и загруженностью. Также можно использовать в качестве CRM системы. \r\n\r\n\r\n\r\nОтзывы за: возможность ставить тикеты членам команды, а также возможность хранить данные и устанавливать связи между ними.\r\n\r\nОтзывы против: не подходит для комплексного управления проектами.\r\n\r\n31. Task Manager – софт для десктопов (Windows 8, 7, Vista и XP), являющийся простым планировщиком задач. Позволяет делить проекты на задачи, управлять задачами и делегировать их членам команды.\r\n\r\n\r\n\r\nОтзывы за: есть уведомления и быстрые шаблоны; бесплатный 45-дневный триал.\r\n\r\nОтзывы против: необходимо время, чтобы разобраться со всеми функциональными особенностями; качество технической поддержки зависит от менеджера; условная мобильность системы.\r\n\r\n32. PayPanther –приложение не столько для управления проектами (хотя, эта особенности так же присутствует), сколько для слежения за онлайн платежами, создания инвойсов, а также ведения бухгалтерии.\r\n\r\n\r\n\r\nОтзывы за: простое в использовании; в приложение интегрирована CRM система; позволяет следить за внутренними метриками. \r\n\r\nОтзывы против: не подойдет для совместной работы большой команды.\r\n\r\n33. MS Project –гигант на рынке управления проектами, в основе которого лежит диаграмма Ганта, позволяющий планировать проекты и управлять ресурсами, планировать сценарии «что если», а также устанавливать и следить за дедлайнами и прогрессом.\r\n\r\n\r\n\r\nОтзывы за: стабильная система, которой есть основания доверять.\r\n\r\nОтзывы против: это программное обеспечение доступно только на десктопе, нет мобильности; быстро разобраться не получится из-за большого количества не всегда нужных фич; нет возможности быстро поделиться проектом.\r\n\r\n34. ISETIA – сервис управления проектами, объединяющий в себе доску Kanban, иерархическую структуру задач и диаграмму Ганта. Позволяет обмениваться в системе документами и файлами.\r\n\r\n\r\n\r\nОтзывы за: достаточно простой интерфейс, возможность визуализации данных в разных формах.\r\n\r\nОтзывы против: не похоже, что у сервиса до сих пор есть поддержка. \r\n\r\n35. Kanbanery – популярный сервис для управления проектами с помощью Kanban доски.\r\n\r\n\r\n\r\nОтзывы за: можно быстро начать пользоваться, есть возможность делиться проектами с клиентами.\r\n\r\nОтзывы против: не похоже, что у сервиса до сих пор есть поддержка. \r\n\r\n36. Nutcache – web-приложение для отслеживания прогресса, статуса и времени выполнения задач, выставления счетов, а также слежения за расходами и управления проектами. \r\n\r\n\r\n\r\nОтзывы за: простота в использовании, как я вижу, неплохое решение для менеджеров по продажам. \r\n\r\nОтзывы против: нет автоматического выставления счетов, нет возможности работать совместно с членами команды.\r\n\r\n37. Eylean Board – клиент для десктопа (нет web-приложения) для управления Agile проектами, представляющий собой доску задач для Scrum и Kanban. Отзывы за: гибкость и простота интерфейса, есть интеграция с TFS.\r\n\r\n\r\n\r\nОтзывы против: нет возможности устанавливать подзадачи. \r\n\r\nНемного off-list сервисов, которые показались нам интересными и, возможно, полезными для других проектов:\r\n\r\n38. KPI Fire – сервис позволяет настроить краткосрочные и долгосрочные цели для членов команды и следить за ходом выполнения проекта.\r\n\r\n\r\n\r\nОтзывы за: сервис позволяет легко сравнивать производительность и стратегические планы с текущими показателями.\r\n\r\nОтзывы против: необходимо время, чтобы настроить работу с сервисом.\r\n\r\n39. Odoo – сборник open source приложений для бизнеса, включающих в себя системы CRM, POS, создания сайтов, eCommerce, продаж, выставление счетов, ведения бухгалтерии, слежения за ресурсами, HR, а также сервисы для управления проектами и маркетинга.\r\n\r\n\r\n\r\nОтзывы за: доступно много моделей для бизнеса, каждый может найти для себя.\r\n\r\nОтзывы против: для работы с сервисом, необходимо иметь бэкграунд в разработке, менеджеру будет непросто сходу разобраться.\r\n\r\n40. Crowdicity – сервис управления идеями, имеющий внушительную базу клиентов: LEGO, WWF, BBC, P&amp;G, Deloitte, John Lewis и другие. Позволяет членам команды выдвигать идеи и голосовать за них.\r\n\r\n\r\n\r\nОтзывы за: очень прост в использовании; в Crowdicity весь интерфейс может быть кастомизирован под вашу компанию.\r\n\r\nОтзывы против: нет статистики и возможности проводить конечные опросы. \r\n\r\n41. Camayak – сервис не станет находкой для управления it-проектами, но отлично подойдет для управления издательствами и совместной работы специалистов по маркетингу и контент- и smm-менеджеров. Позволяет устанавливать дедлайны, планировать активности, вести все переписки и обсуждения на одной платформе, а также координировать действия отдела контента и дизайнеров.\r\n\r\n\r\n\r\n42. eXo Platform – сервис, объединяющий всех сотрудников, разработчиков и клиентов вместе. Является некой комбинацией всех каналов коммуникаций, от интранета, почтовых ящиков, до социальных сетей и блога.\r\n\r\n\r\n\r\nОтзывы за: расширенная впечатляющая функциональность.\r\n\r\nОтзывы против: может быть тяжело начать пользоваться сервисом; сервис может сильно подвисать.\r\n\r\n43. Kindling – сервис позволяет членам команды делиться идеями и быстро высказывать свое мнение о предложениях других участников. Таким образом, вы можете выстраивать свою работу, спрашивая мнение каждого участника.\r\n\r\n\r\n\r\nОтзывы за: интуитивный интерфейс.\r\n\r\nОтзывы против: не хватит функциональности для планирования, для планирования нужно будет использовать тот же онлайн сервис Jira или график Ганта от GanttPro.\r\n\r\nКак итог. Сейчас доступно очень много приложений для управления вашими проектами, найти можно совершенно любой софт, подходящий под нужды вашей, конкретной компании. Проблема – в выборе. Как понять, что сервис, предлагающий «организовать взаимоотношения, людей и проекты легко и просто, сегодня», — это таск-менеджер, который вы так долго искали? \r\n\r\nНадеюсь, этот список поможет вам выбрать подходящий софт!\r\n\r\nА что вы используете для управления проектами?"}


{"name": "Как поддерживать канал в Telegram c 20 000 подписчиков? Интервью с создателем All-in-One Person", "article": "\r\nВ своем канале All-in-One Person Константин Докучаев рассказывает об интересных сервисах и программах, которые призваны упростить нашу жизнь. Часто публикует скидки на всякие крутые штуки или рассказывает о хитростях по настройке. Об этом подробнее — в интервью с автором.\r\n\r\nКак появился канал All-in-One Person?\r\nКанал появился на основе моего сайта. Это был просто автопостинг из RSS сначала в бота, а потом уже в канал.\r\n\r\nКак настоящий олдфаг 90-ых, я потребляю новости при помощи RSS, а не лент в социальных сетях. Поэтому я утром за завтраком и в течение дня просматриваю ленту, и, если вижу что-то подходящее для канала, готовлю пост. 90% контента я планирую именно утром перед работой, а посты публикуются автоматически в течение дня.\r\n\r\n\r\n\r\nКакой контент постить, и нравится ли аудитории 5 постов в день?\r\nАудитория с количеством постов не справляется, конечно. Это главная особенность моего канала и его проблема. В день получается около 5 постов, и охват одной публикации достигает примерно 8000 просмотров, когда у канала более 23000 подписчиков. Мой канал — это справочник, и многие читают канал раз в несколько дней или реже. Контент четко структурирован по тегам, и всегда можно найти нужный сервис или программу. \r\n\r\nЛучшие и худшие посты канала\r\nПервый пост, где я высказал свое мнение на тему блокировки Telegram и посоветовал методы защиты, отрепостил Незыгарь, и пост набрал рекордные 60 тысяч просмотров:\r\n\r\n\r\n\r\nВо второй раз я решил пошутить на эту тему. Видимо, это было слишком сложно, и от меня отписалось человек 500:\r\n\r\n\r\n\r\nНужна ли команда, чтобы работать с каналом в 20 000 подписчиков?\r\nВ 99% случаев все, что вы видите, сделано мной. Однако с частью работы по сайту и каналу я перестал справляться один, а автоматизировать не получилось. Сейчас нас пять человек, включая меня.\r\n\r\n\r\nМоя девушка делает картинки для привлечения внимания;\r\nИбрагим Саламов пишет для меня все рекламные посты. Кстати, у него тоже есть крутой канал про медицину;\r\nЕще один человек помогает мне с постами про iOS и Mac. Если вы видите пост на эту тему, 90% это его рук дело;\r\nЕсть редактор-фрилансер с биржи text.ru. Она просто проверяет текст для сайта на ошибки.\r\n\r\nКак набрать 20 000 подписчиков?\r\nНабрать подписчиков можно легко, если у вас есть деньги и правильно подобрать рекламные площадки. Если денег нет, но есть супер крутой контент, то набрать аудиторию сложнее. Все-таки Telegram — такая площадка, где без рекламы трудно рассказать о себе потенциальной аудитории. Поэтому стоит финансово вложиться в свой канал, если хочется быстрого роста.\r\n\r\nПервую аудиторию можно набрать среди своих друзей, потом пойти по каталогам и небольшим каналам смежной тематики. И постепенно наращивать темпы развития.\r\n\r\nОчень хорошо помогают публикации в СМИ (платные и нет). На бесплатные публикации надеяться не стоит, если у вашего канала техно-тематика или какая-то другая узкая. Про вас не будут рассказывать на каждом углу, если ваша тема не хайповая и вы не являетесь первоисточником.\r\n\r\nКак выбрать рекламную площадку?\r\n\r\nВыбрать каналы для продвижения — очень сложная задача. И сейчас она становится еще сложнее, чем раньше. В этом году на Telegram обратили внимание владельцы пабликов из ВКонтакте. Если раньше была проблема не попасть на “узбекский” канал (аудитория этих каналов плохо монетизируется), нарваться на ботов, то теперь еще нужно обойти каналы-клоны пабликов. Их владельцы занимаются копированием контента из пабликов, книг или еще откуда-то. Они скупают трафик без разбора и за пару недель выходят в топ.\r\n\r\nАвторских каналов с проверенным контентом как было немного, так и осталось. В некоторых из них всего несколько тысяч подписчиков. И найти такие каналы часто бывает трудно.\r\n\r\nМногие каналы, которые находятся в топе, искусственно накручены различными методами. А отличить такие каналы можно только исходя из своего опыта и знания внутренней кухни Telegram.\r\n\r\n\r\n\r\n“На продвижение уходит от 50 до 100 тысяч рублей в месяц”\r\nПоначалу эта сумма разделялась на десятки площадок. Сейчас уже практически вся сумма уходит на две-три рекламы. Соответственно и отдача от этих площадок ожидается выше.\r\n\r\nСтоимость подписчика сильно зависит от тематики вашего канала и качества аудитории, которую вы хотите привлечь. Еще недавно подписчик у меня получался 10-15 рублей. Но в крупные каналы подписчиков привлечь сложнее. И сейчас я ориентируюсь на 20-30 рублей.\r\n\r\nДругие расходы канала — это редактура. Еще примерно 10 тысяч в неделю.\r\n\r\nСервисы для работы над контентом, домен, хостинг и прочее — это уже технические нужды. Еще тысяч 5-10 в год.\r\n\r\nКак продвинуть Telegram-канал бесплатно?\r\nУ многих авторов нет денег на продвижение. Поэтому есть такое понятие как взаимный пиар. Когда два канала рассказывают друг о друге бесплатно. Я таким же образом набрал основную часть своей аудитории. Когда же появился стабильный доход от рекламы, мне стало проще купить пост на площадке.\r\n\r\nИнструменты для работы с Telegram-каналами\r\nДля работы над каналом я использую несколько инструментов:\r\n\r\n\r\nKUKU.io — для автопостинга и просмотра контент плана;\r\nTrello для организации работы над рекламой и рекламным контентом;\r\nTelegram Analytics для аналитики.\r\nGoogle Analytics\r\n\r\nС ботами у меня не получается дружить. Даже популярные боты часто не работают или совершают “оплошности”. Например, популярный Controller бот часто публикует посты не во время или сразу пачкой. \r\n\r\nРазобраться с тем, кто моя аудитория, мне помогает сайт. В Telegram нет инструментов аналитики, кроме Google Форм или ботов-опросников. Но подписчики читают мой сайт, и я знаю про них все, благодаря Google Analytics.\r\n\r\n\r\n\r\nСколько стоит канал All-in-one Person?\r\nСтоимость канала, которую вы хотите и цена, которую реально можно получить — две разные цифры. Мне нравится следующая формула рассчета стоимости канала: доход от рекламы за год + наценка за бренд.\r\n\r\nНе имеет значение количество подписчиков в канале, если от канала нет дохода. Но при перекупке канала сложно будет удерживать планку дохода, как это делал автор. Если мой канал купят, я не думаю что его смогут вести так, как это делаю я. Следовательно и с рекламой будет беда.\r\n\r\nИсходя из формулы выше, я готов выслушать предложение о продаже канала при цифре в два миллиона рублей (здесь можно взять в руки калькулятор и посчитать доход).\r\n\r\nВыводы: \r\n\r\n\r\nПро ваш канал не будут рассказывать “на каждом углу”, если ваша тема не хайповая и вы не являетесь первоисточником.\r\nНабрать подписчиков можно легко, если у вас есть деньги и правильно подобрать рекламные площадки.\r\nМногие топовые каналы накручены, и разобраться в них без опыта сложно.\r\nБесплатно продвинуть канал можно с помощью взаимного пиара и репостов крупных каналов.\r\nИнструменты для Telegram: KUKU.io (автопостинг), Telegram Analytics, Trello (организация работы)\r\nСтоимость канала можно подсчитать по формуле: доход от рекламы за год + наценка за бренд.\r\n"}


{"name": "Webix 2.4. Дверь в лето", "article": "\r\n\r\nЛето набирает силу, и разработчики Webix позаботились о том, чтобы вам было чем себя занять в отпуске или на каникулах. Не так давно в их блоге появился пост о новой, за номером 2.4, версии фреймворка. Новые фичи, обновления, длинный список багфиксов. Очень увлекательно! Давайте посмотрим подробнее, что для нас приготовили.\r\n\r\nК слову говоря, если вы слышите это название впервые и вообще не понимаете, о чем речь, здесь доступен мой небольшой Webix-туториал.\r\n\r\nPortlet Widget\r\n\r\n\r\n\r\nPortlet представляет из себя drag-and-drop контейнер, который может содержать любой другой элемент. Таким образом, можно быстро менять расположение элементов на странице. Лучше понять, как это выглядит, поможет демка.\r\n\r\nДобавить отдельный portlet можно так:\r\n\r\n{ view:\"portlet\", body:{\n\ttemplate:\"My portlet\"\n}}\n\r\n\r\nДля тех, кто не читал мою статью-введение и не знаком с Webix: свойство `view` необходимо для добавления нового элемента, а его значение определяет тип добавляемого элемента. Таким образом, код выше добавит на страницу один portlet с содержимым, определяемым свойством `body`. \r\n\r\nБольше инфы и демок можно найти на странице документации.\r\n\r\nMultiCombo\r\n\r\n\r\nMulticombo окажется полезным в случае, если при работе с формами пользователю нужно выбрать несколько элементов из списка. Кликаем на multicombo-поле — появляется выпадающий список с чекбоксам. Выбираем нужные. Готово! Демо-страница.\r\n\r\nИспользовать можно так:\r\n\r\n{ view:\"multicombo\", label:\"To\", value:\"2,3,4,13\", suggest: \"data/names.js\"}\n\r\n\r\nгде `value` содержит изначально выбранные элементы, а `suggest` (функция или строка) определяет источник данных для выпадающего списка. Документация доступна здесь.\r\n\r\nRangeSlider\r\n\r\n \r\n В отличие от старого доброго слайдера, этот позволяет выбрать определенный диапазон значений. Демо.\r\n\r\nИспользуем, например, так:\r\n\r\n{ view:\"rangeslider\", label:\"Level B\", value:[0,100], name:\"slider1\"}\n\r\n\r\nгде `value` содержит нужный диапазон значений; `name` — имя контрола, нужное для того, чтобы извлечь из него выбранное значение.\r\n\r\nВалидация форм\r\n\r\n\r\nПользователи вечно норовят ввести неверные данные! Для самых недогадливых из была разработана фича под названием Validation Message. Она окрашивает поле с неверно введенными данными в радикально красный цвет и выводит заданное сообщение об ошибке. Корректность введенных данных, к слову, можно проверить с помощью заранее определенных разработчиками правил:\r\n\r\nvar form = [\n\t//some code here\n\t{ view:\"text\", label:'E-mail address', name:\"email\", invalidMessage: \"Incorrect e-mail address\" },\n\t//some more code here\n];\nwebix.ui({\n\tview:\"form\", \n\telements: form,\n\t//form config\n\trules:{\n\t\t\"email\": webix.rules.isEmail,\n\t},\n\t//some more form config\n});\n\r\n\r\nЗа выводимое сообщение, понятное дело, отвечает свойство `invalidMessage`. О том, как даже самых несмышленых заставить вводить валидные данные, читайте в документации.\r\n\r\nПомимо описанных новшеств, разработчики, как и в прошлый раз внесли множество обновлений и исправили большое количество ошибок. Полный список изменений доступен здесь."}


{"name": "Webix 2.3. Весеннее обновление", "article": "Не так давно в блоге разработчиков этой JavaScript библиотеки появился пост о релизе новой версии за номером 2.3. Обновления это хорошо, спору нет. Но, глядя в окно на позднемартовскую улицу, становится не вполне понятно, что же выбрать: разбираться с новыми доступными возможностями или же вместо этого неторопливо прогуливаться под неокрепшим еще весенним солнцем, отмечая подспудно скорое уже пришествие долгожданного лета и вдыхая жадно всем нутром своим разлитый повсюду запах весны и оживления? Вопрос непростой. Нужно разбираться.\r\n\r\n\r\n\r\n\r\n\r\nMaterial Design\r\nВо-первых, приятная новость для любителей леденцов, количество которых (любителей, не леденцов), вероятно, увеличится еще больше сразу после релиза Android 5.1.1, в котором, судя по всему, наконец-то будет исправлена нашумевшая проблема утечки памяти. Разработчики Webix решили погреться в лучах славы нового Material design от Google и выкатили свой Material skin:\r\n\r\n\r\n\r\nОбещают приятный интерфейс, яркие цвета и отзывчивый дизайн. Те, кто не привык верить обещаниям, могут сами убедиться, насколько это соответствует истине на демо-странице. Плохая новость для ленивцев: чудо-скин не будет включен в библиотеку, за ним придется отправиться на github. \r\n\r\nНовые значки уведомлений для кнопок и элементов меню\r\nНо даже Material skin меркнет перед лицом следующей киллер-фичи! Теперь можно добавлять кругленькие оранжевенькие значки (OH, WOW!!!) к элементам меню и кнопкам на странице. Их можно использовать для обозначения количества новых уведомлений, неотвеченных имейлов от вашей бывшей или чего угодно ещё, что может прийти вам в голову:\r\n\r\n\r\n\r\nДемо-страница также в наличии.\r\n\r\nOrganogram widget\r\nЗвучит устрашающе, но на самом деле это виджет для построения иерархических диаграмм:\r\n\r\n\r\n\r\nЕсли вы уже использовали ранее Webix Tree, освоить эту штуковину будет несложно. Также можно менять внешний вид по своему вкусу: размер, выравнивание, все, что душа пожелает. Для эстетов доступна возможность изменения стиля с помощью CSS. Потыкать можно здесь.\r\n\r\nBarCode widget\r\nВремена нынче непростые. Приходится вертеться, как можешь. Тем из вас, кто решил основать собственный свечной заводик, может пригодиться генератор штрих-кодов. Можно генерить штрих-коды, соответствующие наиболее популярным стандартам: EAN8, EAN13 и UPC-A. \r\n\r\nИспользовать можно, например, так:\r\n\r\nwebix.ready(function(){\n\twebix.ui({\n\t\tview: \"barcode\",\n\t\tid: \"barcode\",\n\t\ttype: \"ean13\",\n\t\tvalue: \"123456789012\"\n\t});\n});\n\r\n\r\nИ, собственно, результат:\r\n\r\n\r\n\r\nTypeScript\r\n\r\n\r\nИ, наконец, новость для тех, кто использует TypeScript. Начиная с версии 2.3, Webix позволяет использовать готовый файл определения типов. Можно скачать файл напрямую, можно использовать NuGet или другой менеджер пакетов.\r\n\r\nИтого\r\nРелиз интересный. Есть новшества, которые будут любопытны многим, например Material skin. Пятая версия мобильной ОС от Google набирает обороты и было бы не лишним подумать о том, чтобы придать своим веб-приложениям вид, знакомый пользователям по их мобильной ОСи. Некоторые же фишки большинству из вас могут показаться малополезными. Когда, например, вы в последний раз использовали органограммы в своих проектах? \r\n\r\nПомочь внести окончательную ясность может полный список изменений. Тем, кто постоянно пользуется библиотекой, придется по нраву работа над ошибками: список фиксов довольно немаленький. Скачать библиотеку можно здесь. \r\n\r\nНа этом, пожалуй, всё…\r\n\r\nАх, да! Отвечая на вопрос, поставленный в самом начале статьи: просто возьмите ваш лэптоп с собой на прогулку."}


{"name": "Создание подсказок для сайта с помощью EnjoyHint", "article": "Друзья мои! Время от времени каждый из нас сталкивается с ситуацией, когда, попав на новый для себя сайт, приходится хорошенько поразмыслить минуту-другую, чтобы понять, как там все устроено. Примерно в таком же положении можно оказаться, обнаружив радикальные (или не очень) перемены во внешнем облике любимых сайтов, будь то last.fm или Кинопоиск. Существуют разные способы примирить пользователей с новым дизайном: от постепенного знакомства с привнесенными новшествами («Попробуйте бета-версию обновленного сайта прямо сейчас!») до создания пошагового гайда по новым возможностям. О последнем варианте мы сегодня и поговорим. \r\n\r\n\r\n\r\nЦель этой статьи — рассказать о процессе создания интерактивных подсказок для сайта с помощью EnjoyHint. Сначала мы создадим подсказку для отдельного элемента. Затем посмотрим, как можно создать последовательность подсказок, которые будут запускаться одна за другой. Таким образом, у нас получится интерактивное руководство по основным возможностям нашего сайта. В качестве примера использовался небольшой шаблон поисковика, написанный с помощью Bootstrap.\r\n\r\nОдной из зависимостей является jQuery версии 1.7 или выше. Другая его зависимость — KineticJS версии 5.10, но, поскольку эта библиотека уже включена в EnjoyHint, беспокоиться о ней лишний раз не стоит.\r\n\r\nТе, кому не терпится узнать, как в конце концов будет выглядеть получившийся гайд, могут посмотреть эту демку.\r\n\r\nEnjoyHint. Немного теории\r\nС помощью EnjoyHint можно создать последовательность интерактивных подсказок, которые помогут пользователю пробраться через многочисленные элементы вашего сайта, попутно рассказав ему, какие из них для чего предназначены. Это может оказаться полезным в случае сложного веб-приложения с большим количеством элементов.\r\n\r\nМожно выделить, например, отдельную кнопку и рассказать, для чего она нужна. Также можно взять посетителя сайта за руку и провести его через весь сайт, попутно объясняя, что и для чего стоит использовать. При этом вы можете применять собственные стили к текстам подсказок и изменять форму и границы выделенной области.\r\n\r\nОсновные фичи:\r\n\r\n\r\nАвтоматический фокус и подсветка выбранной области\r\nИзменение формы и границ- выделенной области\r\nВозможность задатьзадержку появления подсказки\r\nВозможность продолжитьпрерванную последовательность подсказок\r\nКросс-браузерная поддержка (Chrome, FireFox, IE10+, Safari)\r\nПоддержка устройств с сенсорным экраном под управлением Android, iOS и Windows\r\n\r\nНа этом, пожалуй, теоретическую часть можно завершить и перейти непосредственно к написанию кода.\r\n\r\nСоздание подсказки\r\nВ качестве примера я сделал вот такую маленькую модель поисковика:\r\n\r\n\r\n\r\nИтак, приступим. Для начала подготовим необходимые файлы. Вы можете установить EnjoyHint с помощью менеджера пакетов Bower:\r\n\r\nbower install enjoyhint\n\r\n\r\nИли скачать его с этой страницы на GitHub. В качестве примера мы используем второй вариант.\r\n\r\nДобавляем jQuery и необходимые js- и css-файлы из архива EnjoyHint:\r\n\r\n&lt;script src=\"http://code.jquery.com/jquery-1.11.3.min.js\"&gt;&lt;/script&gt;\n\n&lt;script src=\"enjoyhint/enjoyhint.min.js\"&gt;&lt;/script&gt;\n&lt;link href=\"enjoyhint/enjoyhint.css\" rel=\"stylesheet\"&gt;\n\r\nЯ поместил весь код, необходимый для создания подсказок, в отдельный файл `hint-sequence.js`:\r\n\r\n&lt;script src=\"hint-sequence.js\"&gt;&lt;/script&gt;\n\r\n\r\nИнициализация EnjoyHint\r\nДля начала нужно создать новый экземпляр объекта EnjoyHint:\r\n\r\nvar enjoyhint_instance = new EnjoyHint({});\n\r\n\r\nТеперь мы можем создать описание подсказки:\r\n\r\nvar enjoyhint_script_steps = [\n\t{\n\t\t /*код подсказки*/\n\t}  \n];\n\r\nИли, если вам нужно создать последовательность из нескольких подсказок:\r\n\r\nvar enjoyhint_script_steps = [\n\t{\n\t\t/*код первой подсказки*/\n\t},\n\t{\n\t\t/*код второй подсказки*/\n\t}\n];\n\r\nДалее, с помощью метода `set` мы выбираем созданную последовательность в качестве конфигурации:\r\n\r\nenjoyhint_instance.set(enjoyhint_script_steps);\n\r\nВсе готово. Теперь можно запустить наш скрипт:\r\n\r\nenjoyhint_instance.run();\n\r\n\r\nОписание подсказки\r\nВ качестве первого примера мы создадим подсказку, которая расскажет посетителю сайта о предназначении кнопки «Фильтр»:\r\n\r\nvar enjoyhint_script_steps = [\n\t{\n\t\t'click .btn' : 'Эта кнопка позволяет фильтровать результаты поиска'\n\t} \n];\nenjoyhint_instance.set(enjoyhint_script_steps);\nenjoyhint_instance.run();\n\r\nРезультат показан ниже:\r\n\r\n\r\n\r\nВот как это работает. `click` — это событие, которое запустит следующую подсказку. В данном случае — нажатие кнопки. Выбрать элемент страницы, который будет выделен и для которого появится подсказка можно с помощью селектора. В нашем случае этим элементом является кнопка «Фильтр» со значением атрибута `class=btn`. Далее, после двоеточия, следует текст подсказки. \r\n\r\nПоскольку мы создаем единственную подсказку, после того, как мы нажмем на кнопку «Фильтр» или на кнопку «Skip», она исчезнет. Кнопка «Skip» появляется по-умолчанию. Но, поскольку все наше руководство состоит из одного-единственного шага, она смотрится немного неуместно. В данном примере попросту нечего пропускать. EnjoyHint позволяет добавлять собственные CSS-классы и названия к своим элементам, что будет полезно, если вы хотите добавить описание к единственному элементу вашей страницы. \r\n\r\nВы можете изменить надпись на кнопке с помощью свойства `skipButton`:\r\n\r\n'click .btn' : /*текст подсказки*/,\n'skipButton' : {className: \"mySkip\", text: \"Понял!\"}\n\r\nЭтот код также добавит к ней CSS-класс `mySkip`. Используя, например, такой CSS-код:\r\n\r\n.mySkip {\n\tcolor: white;\n\tborder-color: white;\n}\n\r\nМожно изменить цвет кнопки:\r\n\r\n\r\n\r\nЕсли же кнопка «Skip» покажется вам лишней, ее можно вообще убрать с помощью свойства `showSkip: false`.\r\n\r\nИтак, мы знаем, как создать отдельную подсказку. Теперь можно создать последовательность подсказок, которые будут запускаться друг за другом. Таким образом, у нас получится интерактивное руководство.\r\n\r\nПоследовательность подсказок\r\nЧтобы написать наше руководство по сайту, мы создадим описание подсказок с чистого листа.\r\nПервая подсказка. Событие 'next'\r\nДля того, чтобы создать первое событие, используем следующий код:\r\n\r\n'next .navbar-brand' : /*текст подсказки*/\n\r\nВ этот раз было использовано событие `next` и вот что мы получили в результате:\r\n\r\n\r\n\r\nКак видите, заголовок сайта теперь выделен. На этот раз у нас две кнопки: «Next», которая запустит следующую подсказку и «Skip», которая прервет работу скрипта. Изменить кнопку «Next» можно почти таким же способом, что и кнопку «Skip» из предыдущего примера:\r\n\r\n'nextButton' : {className: \"myNext\", text: \"Конечно!\"},\n'skipButton' : {className: \"mySkip\", text: \"Обойдусь\"}\n\r\nВот что вы получите в качестве результата:\r\n\r\n\r\n\r\nБудем надеяться, что посетители сайта решат просмотреть руководство целиком. А значит, нужно создать следующую подсказку.\r\n\r\nВторая подсказка. Событие 'key'\r\nЭтот шаг руководства расскажет пользователю, как использовать строку поиска. Для этого мы используем событие `key`. Оно запустит следующую подсказку после нажатия определенной клавиши:\r\n\r\n'key #mySearchButton' : /*текст подсказки*/,\n'keyCode' : 13\n\r\nОбратите внимание, что в этом случае в качестве селектора было использовано значение атрибута `&lt;id=mySearchButton&gt;`. Свойство `keyCode` определяет код клавиши, нажатие которой запустит следующую подсказку. В данном случае это код клавиши Enter.\r\n\r\nДавайте посмотрим на результат:\r\n\r\n\r\n\r\nПосле нажатия клавиши, появится следующая подсказка. \r\nТретья и четвертая подсказки. Меняем форму\r\nВ качестве третьего шага мы используем уже знакомый нам пример для кнопки «Фильтр»:\r\n\r\n'click .btn' : /*текст подсказки*/\n\r\nПосле нажатия кнопки будет вызвана четвертая подсказка. И на этот раз мы изменим форму выделенной области на круг. Для этого используем свойство `shape`:\r\n\r\n'next .about' : /*текст подсказки*/,\n'shape': 'circle'\n\r\nВ результате ссылка «О сайте» будет выделена как показано на скриншоте:\r\n\r\n\r\n\r\nПоследний шаг. Меняем размер\r\nEnjoyHint прекрасно справляется с подсветкой элементов разного размера. Но если размер выделенной области по-умолчанию вас не устраивает, можно его изменить с помощью свойства `radius`. Сейчас мы создадим последнюю подсказку с использованием этой возможности. Поскольку это последний шаг нашего руководства, кнопка Skip нам больше не понадобится. Можно убрать ее с помощью свойства `showSkip: false`. \r\n\r\nИтак, код для последней подсказки:\r\n\r\n'next .contact' : 'Ждем ваших отзывов и предложений :)',\n'shape': 'circle',\n'radius': 80,\n'showSkip' : false,\n'nextButton' : {className: \"myNext\", text: \"Закрыть\"}\n\r\nРезультат:\r\n\r\nКоллбеки\r\nПоследнее на сегодня. Коллбеки. Для их вызова можно использовать события скрипта `onStart` и `onEnd`. Событие `onStart` запускается в самом начале работы, перед первой подсказкой. Событие `onEnd` запускается после последней подсказки. Например:\r\n\r\nvar enjoyhint_instance = new EnjoyHint({\n\tonStart:function(){\n\t\t// вызывается перед первой подсказкой\n\t},\n\tonEnd:function(){\n\t\t// вызывается после последней подсказки\n  }\n});\n\r\nДоступно также событие для отдельной подсказки `onBeforeStart`. Оно запускается перед появлением подсказки на экране:\r\n\r\nvar enjoyhint_script_steps = [\n\t{\n\t\t/* описание подсказки */\n\t\tonBeforeStart:function(){\n\t\t\t// вызывается перед подсказкой\n\t\t}\n  }\n];\n\r\n\r\nЗаключение\r\nС помощью EnjoyHint можно быстро добавить на сайт одиночные подсказки или пошаговый гайд по основным элементам. Для того, чтобы добавить подсказку, нужно просто привязать ее к нужному селектору, а для описания самой подсказки можно использовать HTML-теги. Скачать EnjoyHint, а также почитать инструкцию, содержащую описание доступных фич можно здесь."}


{"name": "Как подсознательно побудить сотрудников соблюдать дедлайны проекта", "article": "Управление проектом в любой сфере предполагает наличие дедлайнов. Есть главный, венчающий собой всю работу и говорящий о его завершенности/незавершенности. Как правило, планы включают в себя и другие дедлайны для этапов поменьше.\r\n\r\n\r\n\r\n\r\nПроекты подразумевают совместную работу. Это значит, что задачи и сроки их завершения у одного члена команды могут значительно влиять на время выполнения у других коллег. Это как эффект домино, где негативные последствия приведут к неконтролируемому расширению масштаба проекта.\r\n\r\nОднако вся суть в том, что сроки выполнения соблюдаются редко независимо от того, связано это с работой или повседневной жизнью. По своей природе люди склоны несерьезно относиться ко всему далекому, предполагая, что времени еще достаточно. Как правило, они ошибаются.\r\n\r\nКакой здесь психологический подтекст?\r\n\r\nКак было сказано выше, такое поведение характерно многим людям в силу своей природы. Психологи выделяют много причин. Приведу некоторые из них.\r\n\r\nМотивация\r\n\r\nДоводилось ли вам сдавать экзамен, подготавливаясь к нему всего за ночь? Если да, то вы должны помнить свое волнение. Чем ближе дата важного события, дедлайна проекта или задачи, чем ближе вы к ней приближаетесь, тем больше волнения и нервозности вы ощущаете. В английском языке есть даже специальный термин — Goal Looms Larger Effect.\r\n\r\nИ вот как психологи описывают его суть: мотивация завершить задачу увеличивается, когда уменьшается количество времени до нее. Чем ближе вы приближаетесь к успеху, тем больше усилия вы вкладываете в его достижение. Другими словами, как только вы приближаетесь к цели (задаче, дедлайну), тем больше вы думаете об этом. И вот это повышенное внимание помогает извлекать выгоду.\r\n\r\n\r\n\r\nДавление\r\n\r\nС точки зрения психологии можно объяснить и другие моменты. К примеру, есть категория людей, полагающих, что под давлением они лучше работают. Однако это бессмысленно, поскольку тяжело прилагать максимум усилий в условиях ограниченного количества времени. Отсюда следует, что эти люди совсем не работают без дедлайнов. А если же они поставлены, они все равно стараются растянуть сроки.\r\n\r\nОшибки планирования\r\n\r\nА ведь есть еще такое понятие, как ошибка планирования – тенденция неправильно определять время на выполнения любой задачи. На это есть несколько причин.\r\n\r\nМы не учитываем опыт предыдущего планирования. Большинство студентов, будь они даже на последнем курсе, с затруднением оценят период времени на написание курсовой. И это несмотря на то, что до этого как минимум раз в год они ее писали.\r\n\r\nМы не допускаем варианты, что что-то может пойти не так. Планы в нашем представлении всегда идут по наилучшему сценарию. Мы отводим на завершение задачи столько времени, сколько нужно согласно такому ходу событий. Но редко случается, чтобы все шло, как запланировано.\r\n\r\nИ наконец, мы не учитываем все этапы выполнения задачи и время на выполнение каждого из них. Если студенту необходимо написать курсовую, как правило, он не учитывает время, которое стоит провести в библиотеке или в общении с преподавателем для получения информации. Ему кажется, что все время будет потрачено исключительно на написание. Все остальное он не учитывает.\r\n\r\nНо не буду углубляться в дальнейшие нюансы психологии человека, а расскажу, как побудить сотрудников и членов команды уважительно относиться и, главное, соблюдать сроки выполнения задач и проекта в целом.\r\n\r\n\r\n\r\n1. Ставьте только реальные дедлайны\r\n\r\nКак часто вы сталкивались с ситуацией, когда на одну и ту же задачу вам ставят несколько финальных сроков? Когда приближается первый дедлайн, становится понятно, что он ненастоящий. Руководитель или менеджер проекта использовал его для манипулирования командой с примерно такими мыслями: если не соблюдаются сроки первого (ненастоящего) дедлайна, то следующий (настоящий) точно будет соблюден. Не самый удачный пример управления, даже если вы гуру и знаете стили руководства в менеджменте.\r\n\r\nКак подсознательно повлиять на команду?\r\n\r\nРазбейте большие задачи на задачи поменьше с меньшим временным отрезком. Создавайте и назначайте задачи, которые требуют день или два. Члены команды поймут, что они идут непрерывным потоком, и четко обозначенные дедлайны не сложно соблюдать.\r\n\r\n2. Позволяйте команде ставить дедлайны\r\n\r\nУчастники проекта (спонсоры, клиенты, т.д.) зачастую не имеют даже малейшего представления о том, как в нем протекают все процессы. Они не знают, как все работает и как все организованно. Такие лица назначают финальные даты, но исполнители сразу понимают, что их сложно соблюсти.\r\n\r\nКак подсознательно повлиять на команду?\r\n\r\nВключите в эти процессы команду. Позвольте им оценивать реальные сроки на выполнение задач. Такой шаг охарактеризует вас как находчивого менеджера.\r\n\r\nВо-первых, создается атмосфера командной работы. Чем больше вовлеченность в командную работу, тем ответственнее работает участник проекта.\r\n\r\nВо-вторых, члены команды устанавливают дедлайны, основанные на реальном понимании предстоящей работы и необходимого для ее выполнения количества времени. Более того, если команды сама устанавливает сроки, им не на что будет жаловаться. Ведь именно они все оценили и просчитали.\r\n\r\n\r\n\r\n3. Объясняйте\r\n\r\nОбъяснять крайне важно. Недостаточно сказать, когда дедлайн. Обязательно еще уточните, почему это важно. По крайней мере, вы вызовите ответную реакцию.\r\n\r\nБудьте точным настолько, насколько этого требует ситуация. Не нужно говорить следующее.\r\n\r\n — Все ошибки в проекте должны быть исправлены к следующему понедельнику к 18:00.\r\n\r\nГораздо лучше объяснить важность.\r\n\r\n — Все ошибки в проекте должны быть исправлены к следующему понедельнику к 18:00. Это важно, потому что во вторник у нас новый спринт, основанный на всех исправлениях.\r\n\r\nКак подсознательно повлиять на команду?\r\n\r\nСледуйте такой модели всегда. Ведь именно она дает полное представление о дедлайнах. Понимание – это ключ, помогающий с большей ответственностью и серьезностью относиться к срокам.\r\n\r\n4. Делайте акцент на негативных последствиях несоблюденных сроков\r\n\r\nВопрос психологии. Если сроки не соблюдаются, придайте значение негативным последствиям, которые повлияют на весь проект и команду. Страх и все, что с ним связанно, в большей степени влияют на людей, чем что-то положительное и приятное. А еще страх хорошо мотивирует.\r\n\r\nВернемся к примеру выше. Чтобы придать значение негативным результатам, добавим еще одно предложение.\r\n\r\n — Все ошибки в проекте должны быть исправлены к следующему понедельнику к 18:00. Это важно, потому что во вторник у нас новый спринт, основанный на всех исправлениях. Если мы не начнем его, спонсоры сократят расходы, и это напрямую повлияет на нашу заработную плату.\r\n\r\nКак подсознательно повлиять на команду?\r\n\r\nПрименяйте эту тактику, но будьте осторожны: слишком частые угрозы могут подорвать моральное состояние. Делайте акцент на негативных последствиях, но не угрожайте вашей команде.\r\n\r\n\r\n\r\n5. Используйте систему напоминаний\r\n\r\nКонечно, не стоит ежедневно напоминать о дедлайнах, говоря о них, как попугай, при каждом случае. Но и не следует занимать противоположную позицию, сказав о них раз и забыв.\r\nПопробуйте изобрести свою систему напоминаний или же использовать уже зарекомендовавшую себя. Главное, чтобы она работала.\r\n\r\nКак подсознательно повлиять на команду?\r\n\r\nЕсть очень эффективное решение. Вместо постоянных напоминаний о том, когда задача должна быть выполнена, попробуйте вовлечь членов команды в дискуссию, спросив, когда же дедлайн к той или иной задаче. Если коллега сам ответит на ваш вопрос, значит, он не забудет о сроках.\r\n\r\n6. Используйте эффективное ПО\r\n\r\nДаже очень опытные менеджеры не всегда вовремя завершают проекты. Хорошим решением будет начать использовать эффективный и надежный инструмент. Конечно, чтобы найти подходящий, может потребоваться много времени. Но это того стоит.\r\n\r\nНа самом деле, рынок предлагает множество всевозможных инструментов, отличающихся функционалом, рабочими принципами, интерфейсом и т.д. Поэтому в них легко можно затеряться.\r\n\r\nКак улучшить командную работу и соблюдать дедлайны?\r\n\r\nВыберете инструмент, который уже зарекомендовал себя. К примеру, он может быть основан на методе Канбан. Это наглядная система в виде карточек, показывающая, у кого какие задачи, когда их необходимо завершить и т.д.\r\n\r\nВот как это выглядит на примере популярного сервиса Trello.\r\n\r\n\r\n\r\nВ IT-сфере часто используют спринты. Здесь хорошо зарекомендовал себя инструмент JIRA. Менеджер легко создает задачи, назначает ответственных и для каждого спринта ставит дедлайн.\r\n\r\n\r\n\r\nА вот как выглядит проект на примере онлайн диаграммы Ганта GanttPRO. Все задачи здесь визуализированы, видны сроки их выполнения и прогресс.\r\n\r\n\r\n\r\nВпрочем, здесь можно найти подходящий для вас сервис для управления проектами.\r\n\r\nСуммируем\r\n\r\nВ любом проекте важно соблюдать сроки. Но сделать это не всегда легко, особенно если в проекте много задач и участников. Для повышения эффективности попробуйте подсознательно влиять на команду:\r\n\r\n\r\nСтавьте только реальные дедлайны;\r\nПозволяйте команде ставить сроки;\r\nОбъясняйте;\r\nДелайте акцент на негативных последствиях;\r\nИспользуйте систему напоминаний;\r\nИспользуйте эффективное ПО.\r\n"}


{"name": "Webix 3.0 — новый, лиловый", "article": "\r\n\r\nСудя по всему, разработчики этого фреймворка крайне чувствительно относятся к смене сезонов. Раньше я уже писал о новых версиях Webix. И выходили они либо в начале весны, либо в начале лета. На этот раз, судя по всему, в рамках борьбы с осенней депрессией разработчики выкатили мажорный релиз. В новом Webix 3.0, помимо уже привычных нам новых фич и багфиксов, появились два новшества, которыe вполне себе можно считать отдельными продуктами: Webix Jet и Visual Designer. Давайте разберемся, что это такое, зачем это нужно и как это выглядит.\r\n\r\nVisual Designer. All Hail Drag and Drop!\r\nЧто это за штуковина, думаю, ясно уже из названия. Визуальный дизайнер пользовательских интерфейсов придется по вкусу визуалам или тем, кто просто не хочет заморачиваться с кодом. \r\n\r\n\r\n\r\nМожно быстро создать необходимый лэйаут, добавить нужные виджеты, изменить свойства и получить работающий код.\r\n\r\n\r\n\r\nПриложение на данный момент находится в состоянии бета-версии и на момент написания статьи в нем отсутствовали некоторые жизненно важные фичи, например, автодополнение в редакторе кода. Но разработчики уверяют, что работа ведется довольно активная и Visual Designer будет обрастать новыми полезными функциями, так что присмотреться к нему все-таки стоит. Присмотреться можно по этой ссылке.\r\n\r\nWebix Jet\r\nПо словам разработчиков, Webix Jet представляет из себя микро-фреймворк, основной целью которого является упростить разработку, когда дело доходит до приложения с достаточно сложной структурой и встает вопрос о повторном использовании кода, навигации, работы с данными и т.д. \r\n\r\nС помощью Webix Jet можно легко разбить приложение на модули, согласно их назначению (элементы интерфейса, работа с данными). В двух словах описать принципы работы этого фреймворка не так просто, поскольку тема обширная и заслуживает отдельной статьи. Лучше посвятить некоторое время вот этому довольно детальному мануалу (с картинками) и по достоинству оценить концепт.\r\n\r\nПрочие полезности\r\nСобственно Webix также не остался без обновок. Давайте посмотрим на самые интересные из них. \r\n\r\nНовые свойства компонента DataTable: subrow и subview\r\nЭти новые свойства позволяют расширить функциональность компонента DataTable).\r\n\r\nДля того, чтобы добавить какую-то важную (или не очень) информацию к элементам списка, можно использовать свойство `subrow`. Использовать можно так:\r\n\r\n{\n\t/* создаем компонент */\n\tview:\"datatable\",\n\t/* добавляем sub-row */\n\tsubrow:\"Rating: #rating#, Category: #category#\",\n}\n\r\nЭтот код создаст для каждого пункта подстроку, соответствующую шаблону:\r\n\r\n\r\n\r\nМожно создавать свои subrow для каждого отдельного пункта, менять их содержимое, и т.д. Страница документации и демо-страница прилагаются.\r\n\r\nСвойство `subview` работает похожим образом, но в этом случае к элементам списка можно добавлять другие компоненты. Например, для того, чтобы добавить форму, можно использовать такой код:\r\n\r\n view:\"datatable\",\n\t /* добавляем subview */\n\t subview:{  \n\t\t /* описание формы */             \n\t\tview:\"form\",\n\t\telements:[\n            { /* первый элемент формы */ },\n            { /* второй элемент формы */}\n        ]\n\t},\n\t/* инициализация subview */\n\ton:{\n\t\tonSubViewCreate:function(view, item){\n\t\t\tview.setValues(item);\n\t\t}\n\t},\n\r\nВ результате можно получить что-то вроде этого:\r\n\r\n\r\n\r\nСтраница документации находится здесь.\r\n\r\nИмпорт и экспорт\r\nВ новой версии появились дополнительные возможности импорта и экспорта. \r\n\r\nТеперь можно добавить в приложение возможность просматривать PDF и Excel. Для этого нужно использовать компоненты pdfviewer и excelviewer. Как это выглядит на практике, можно понять из этих демок: PDF Viewer, Excel Viewer.\r\n\r\nТакже появилась возможность экспорта в Excel, доступная для всех дата-компонентов. Попробовать можно на этой демо-странице. Сохраненный файл можно в дальнейшем использовать как источник данных для других компонентов.\r\n\r\nВозможность экспорта в PNG может пригодиться, если нужно сохранить график для дальнейшего использования. Демка находится здесь.\r\n\r\nВместо заключения\r\nНа этот раз помимо нововведений, касающихся собственно работоспособности фреймворка, разработчики предложили, по сути, еще два возможных способа того, как этот самый фреймворк можно употребить. \r\n \r\nПомимо этих нововведений, доступны и другие новшества. Полный список можно посмотреть на этой странице. По традиции, прилагается довольно большой список апдейтов и багфиксов.\r\n\r\nТем, кто уже использует Webix, может пригодиться вот этот гайд по миграции."}


{"name": "Webix. Первое знакомство с JavaScript фреймворком", "article": "\r\n\r\nЭта статья предназначена для тех, кто хочет узнать об основах использования этого фреймворка. В ней я постараюсь подробно рассказать о том, как начать работу с Webix. Также стоит обратить внимание на то, какие дополнительные полезные инструменты, помимо библиотеки, предлагают разработчики.\r\n\r\nВ качестве примера я создал вот такую заготовку для онлайн плеера, что соответствует, на мой взгляд, духу времени, поскольку буквально всё нынче стремится утечь в онлайн, будь то хранение данных в облаках или потоковое аудио и видео.\r\n\r\nИсходный код можно писать по мере прочтения статьи, а можно сразу скачать с гитхаба и разбираться с ним в процессе.\r\n\r\n\r\n\r\nВ двух словах\r\nWebix — это JavaScript фреймворк, с помощью которого можно создавать десктопные и мобильные веб-приложения с отзывчивым дизайном. Фреймворк доступен под двумя лицензиями: GNU GPLv3 и коммерческой. \r\n\r\nОсобенности:\r\n\r\n — Легкость освоения. Документация довольно подробна, и понять, как все устроено, несложно. Для того, чтобы начать работу, не нужно быть JS-гуру или JS-ниндзя. Не нужно даже понимать, в чем разница между ними.\r\n — Интеграция с популярными фреймворками. Реализована интеграция с Backbone.js, AngularJS и jQuery. Последняя фича, например, позволяет создавать Webix-виджеты с использованием jQuery-синтаксиса.\r\n — Интеграция со сторонними виджетами. В этом пункте ограничимся списком: Mercury, Nicedit, Tinymce, CodeMirror, CKEditor, Raphael, D3, Sigma, JustGage, Google Maps, Nokia Maps, Yandex Maps, dhtmlxScheduler and dhtmlxGantt.\r\n — Размер — маленький, скорость — большая. В сжатом виде .js-файл весит всего 128 КБ, и при этом все работает довольно-таки быстро (по словам разработчиков так и вовсе «летает»).\r\n — Поддержка тачскрина. Созданные виджеты одинаково хорошо себя чувствуют как на десктопах, так и на смартфонах/планшетах. \r\n\r\nОт слов к делу\r\nОт списка особенностей, которые, думаю, мало кто читает от начала до конца, перейдем к практике. Но сначала предлагаю снова посетить главную страницу библиотеки и обратить внимание на интерактивную демку. Она состоит всего из десяти (10!) строк кода. Результат выглядит довольно симпатично. Если открыть эту демку в отдельном окне (вот ссылка на нее в онлайн-редакторе, если не хотите возиться) и поэкспериментировать с его размерами, можно убедиться в том, что виджет отображается корректно вне зависимости от предлагаемых обстоятельств. Может закрасться подозрение, что такое поведение не дается даром и нужно изрядно повозиться с таблицей стилей. Что ж, вот и проверим. Начать следует, как и положено, с начала.\r\n\r\nСкачать и распаковать. Впрочем, можно обойтись и без этого\r\nДля того чтобы начать использовать библиотеку, нужно сперва получить необходимые файлы. Для этого нужно отправиться на страницу загрузки. Выбираем понравившуюся версию (готов поспорить, в 99 случаях из 100 ей окажется Standard ) — и получаем заветный zip-файл. Внутри можно обнаружить файлы `license.txt`, `readme.txt` и `whatsnew.txt`, которые могут показаться любопытными для тех, кто любит изучать все досконально. Помимо этого, интересным может оказаться содержимое папки `samples`, в которой можно посмотреть примеры того, что полезного с помощью Webix можно смастерить.\r\n\r\nНо больше всего на данный момент нас интересует содержимое папки `codebase`, а именно два файла, которые понадобятся для работы: `webix.js` и `webix.css`. Для того, чтобы можно было использовать Webix, нужно включить эти файлы в HTML-файл будущего проекта:\r\n\r\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n\t&lt;title&gt;Online Audio PLayer&lt;/title&gt;\n\t&lt;link rel=\"stylesheet\" href=\"codebase/webix.css\" type=\"text/css\"&gt; \n\t&lt;script src=\"codebase/webix.js\" type=\"text/javascript\"&gt;&lt;/script&gt;  \n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;script type=\"text/javascript\"&gt;\n\t&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\r\n\r\nЯ также добавил теги , внутрь которых и будет помещен код будущего приложения.\r\n\r\nВпрочем, архив с библиотекой можно даже не скачивать. Все необходимые файлы доступны через CDN. Чтобы использовать эту возможность, можно подключить эти файлы следующим образом:\r\n\r\n&lt;link rel=\"stylesheet\" href=\"http://cdn.webix.com/edge/webix.css\" type=\"text/css\"&gt; \n&lt;script src=\"http://cdn.webix.com/edge/webix.js\" type=\"text/javascript\"&gt;&lt;/script&gt;  \n\r\n\r\nНо лучше все же скачать библиотеку целиком. Помимо сэмплов, в архиве также можно найти набор скинов. Использовать их проще простого, и позже я покажу, как это можно сделать.\r\n\r\nИнициализация\r\nТеперь можно перейти непосредственно к работе с Webix. \r\n\r\nВся Webix-магия происходит внутри конструктора webix.ui(). Если нужно удостовериться в том, что код начнет выполняться после того, как страница полностью загрузится, следует поместить его в webix.ready(function(){}). Выглядеть все это должно так:\r\n\r\nwebix.ready(function(){\n\twebix.ui({\n\t    /*код приложения*/\n\t});\n});\n\r\n\r\nЛэйауты\r\nПрежде чем перейти непосредственно к приложению, нужно разобраться, как можно создавать лэйауты. Наш будущий плеер будет состоять из следующих основных частей: дерево каталогов, в котором будут отображаться все доступные альбомы; обложка альбома; плейлист в виде таблицы и панель управления.\r\n\r\nДля того, чтобы наполнить страницу содержимым нужно добавить описание необходимого элемента в формате JSON. Итак, приступим.\r\n\r\nПри создании лэйаута используются атрибуты rows и cols, с помощью которых можно создавать строки и столбцы соответственно. Вот пример создания простого лэйаута, состоящего из двух строк:\r\n\r\nwebix.ui({\n    rows: [\n        { template:\"Row One\"},\n        { template:\"Row Two\"}\n    ]\n});\n\r\n\r\nВот как будет выглядеть результат: \r\n\r\n\r\n\r\nВ этом примере с помощью template:\"Row One\" был создан простой контейнер, в который можно поместить любой HTML-контент.\r\n\r\nМожно создавать вложенные контейнеры:\r\n\r\nwebix.ui({\n    rows: [\n        { template:\"Row One\"},\n        { cols:[\n            { template:\"Column One\"}, \n            { template:\"Column Two\"} \n        ]}  \n    ]\n});\n\r\n\r\nРезультат: \r\n\r\n\r\n\r\nКомбинируя вложенные строки и столбцы, можно добиться необходимого результата. По-умолчанию контейнеры заполняют все доступное пространство и, создавая четыре контейнера, мы получим четыре одинаковых прямоугольных области. Для того, чтобы задать нужные размеры элементов, можно использовать знакомые всем по CSS свойства width и height. \r\n\r\nТаким образом, код для лэйаута нашего будущего плеера будет выглядеть вот так:\r\n\r\nwebix.ui({\n\trows: [\n\t\t{type:\"header\", template:\"Online Audio Player\"},\n\t\t{cols: [\n\t\t\t{rows: [\n\t\t\t\t{template:\"Tree\"},\n\t\t\t\t{view:\"resizer\"},\n\t\t\t\t{template:\"Album Art\", width: 250, height: 250}\n\t\t\t]},\n\t\t\t{view:\"resizer\"},\n\t\t\t{rows: [\n\t\t\t\t{template:\"Playlist\"},\n\t\t\t\t{template:\"Controls\", height: 60}\n\t\t\t]}\t\n\t\t ]\n\t\t}\n\t]\n});\n\r\n\r\nПомимо уже знакомых колонок и столбцов, я также добавил кое-что новое. type:\"header\" превращает элемент в заголовок. Также были добавлены несколько элементов resizer, которые, как и следует из названия, нужны для изменения размеров контейнера. Ресайзер, как и все прочие UI-компоненты, создаeтся с помощью свойства view, которое позволяет создавать списки, кнопки, формы и т.д.\r\n\r\nВот как выглядит макет будущего приложения на данном этапе:\r\n\r\n\r\n\r\nТеперь у нас есть области нужных размеров и возможность изменить эти размеры на свой вкус. \r\n\r\nСтраница размечена, настало время вдохнуть жизнь в элементы нашего приложения.\r\n\r\nПосадить дерево… Знакомимся с Tree Widget\r\nНачнем с дерева каталогов. Поскольку создание полнофункционального плеера выходит за рамки данной статьи (а также из нежелания столкнуться с возможными проблемами с копирайтом), вместо реальных файлов я использовал простые текстовые данные, которые будут помещены в файл data.js, который будет заполняться содержимым по мере необходимости. Сперва нужно добавить в него информацию об исполнителях и альбомах:\r\n\r\nrecordsData = [  \n{id:\"1\", value:\"Oceansize\", data: [\n    {id:\"1.1\", value:\"Everyone Into Position\"},\n    ]},\n{id:\"2\", value:\"Little People\", data: [\n    {id:\"2.1\", value:\"Mickey Mouse Operation\"},\n    ]},\n];\n\r\n\r\nДвух исполнителей с одним альбомом для каждого из них будет достаточно, чтобы понять базовый принцип. Теперь нужно заставить дерево работать. Во-первых, необходимо подключить файл данных к HTML-фалу. Для этого нужно добавить следующий код между тегами :\r\n\r\n&lt;script src=\"data.js\"&gt;&lt;/script&gt;\n\r\n\r\nВо-вторых, вместо template:\"Tree\" в фигурные скобки нужно вставить код, который создаст дерево:\r\n\r\nview:\"tree\", data:\"recordsData\", select: true\n\r\n\r\nЭта строка создает дерево на основе данных из массива recordsData из файла данных. select: true дает возможность выбирать один из элементов дерева, отключенную по-умолчанию.\r\n\r\nВот как это выглядит на данный момент:\r\n\r\n\r\n\r\nВыуживаем информацию. Использование таблиц для отображения данных\r\nТеперь давайте посмотрим, как работают таблицы данных. Для того, чтобы проверить их работу, нужно добавить в файл data.js два новых массива. gridColumns содержит названия столбцов, которые будут отображаться в нашем списке, а oceanData содержит информацию о треках для первого альбома первого исполнителя: название и продолжительность каждой песни.\r\n\r\ngridColumns = [\n    {\n        dataIndex: \"title\",\n        header: \"Title\"\n    },\n    {\n        dataIndex: \"duration\",\n        header: \"Duration\"\n    }\n];\n\noceanData = [\n    {id: \"1\", title: \"01. The Charm Offensive\", duration:\"7:19\"},\n    {id: \"2\", title: \"02. Heaven Alive\", duration:\"6:20\"},\n    {id: \"3\", title: \"03. A Homage to Shame\", duration:\"5:52\"},\n    {id: \"4\", title: \"04. Meredith\", duration:\"5:26\"},\n    {id: \"5\", title: \"05. Music for a Nurse\", duration:\"8:16\"},\n    {id: \"6\", title: \"06. New Pin\", duration:\"5:11\"},\n    {id: \"7\", title: \"07. No Tomorrow\", duration:\"7:10\"},\n    {id: \"8\", title: \"08. Mine Host\", duration:\"4:10\"},\n    {id: \"9\", title: \"09. You Can’t Keep a Bad Man Down\", duration:\"7:36\"},\n    {id: \"10\", title: \"10. Ornament. The Last Wrongs\", duration:\"9:21\"}\n];\n\r\n\r\nДля того, чтобы отобразить эти данные в виде сортируемой таблицы, нужно заменить template:\"Playlist\" на:\r\n\r\nview:\"datatable\", autoConfig:true, data:oceanData\n\r\n\r\nРаботает этот код так: view:\"datatable\" создает таблицу данных, autoConfig: true помогает сконфигурировать таблицу и создать столбцы на основе данных из массива gridColumns. В качестве расходного материала для таблицы используется массив oceanData.\r\n\r\nВот как выглядит приложение с таблицей:\r\n\r\n\r\n\r\nПрошу заметить, что данные в таблице можно сортировать но названиям или по длительности песни.\r\n\r\nВсе бы хорошо, да только вот дерево и плейлист работают отдельно друг от друга. Неплохо было бы научить их взаимодействовать.\r\n\r\nОперация «Кооперация». Заставляем дерево и список работать сообща\r\nДля этого понадобится проделать некоторую подготовительную работу. Я постараюсь ее минимизировать, чтобы поскорее насладиться результатом.\r\n\r\nВо-первых, недурно бы изменить формат данных в файле data.js. Нужно изменить id для альбомов, а также добавить информацию для альбома второго исполнителя, чтобы было из чего выбирать. Она не отличается от таковой для предыдущего, поэтому мы приведем только часть массива peopleData:\r\n\r\nrecordsData = [  \n{id:\"1\", value:\"Oceansize\", data: [\n    {id:\"oceanData\", value:\"Everyone Into Position\"},\n    ]},\n{id:\"2\", value:\"Little People\", data: [\n    {id:\"peopleData\", value:\"Mickey Mouse Operation\"},\n    ]},\n];\n\npeopleData = [\n    {id: \"1\", title: \"01. Basique\", duration: \"3:38\"},\n    {id: \"2\", title: \"02. Moon\", duration: \"3:47\"},\n    &lt;......&gt;\n];\n\r\n\r\nЗначение id для альбомов из массива recordsData совпадает с именем массива информации для соответствующего альбома. Это важно, потому что так будет быстрее. \r\n\r\nТеперь вернемся к коду приложения. Сначала нужно создать переменную, в которой будет храниться значение элемента, выбранного в дереве. По-умолчанию она будет содержать значение первого альбома в списке. Затем нужно изменить код для построения дерева и таблицы, чтобы они смогли взаимодействовать друг с другом и реагировать на события:\r\n\r\nvar selected = oceanData;\nwebix.ui({\n\t/*.....*/\n\t{view:\"tree\", id:\"myTree\", data:\"recordsData\", select: oceanData, on: {\n\t\tonSelectChange: function(){\n\t\t\tselected = $$(\"myTree\").getSelectedId();\n\t\t\tif (isNaN(selected)) {\n\t\t\t\t$$(\"myList\").clearAll();\n\t\t\t\t$$(\"myList\").define(\"data\", selected);\n\t\t\t\t$$(\"myList\").refresh();\n\t\t\t}\n\t\t}\n\t\t}\n\t},\n\t/*...*/\n\t{view:\"datatable\", id:\"myList\", autoConfig:true, data:selected}\n\r\n\r\nИтак, что мы здесь имеем? Переменная selected по-умолчанию хранит значение первого альбома из дерева, данные которого и отображаются в таблице сразу после загрузки приложения. В код дерева и таблицы были добавлены атрибуты id со значениями myTree и myList соответственно. Они нужны для того, чтобы получить доступ к содержимому этих элементов. Свойство `select: oceanData` определяет `id` элемента списка, выбранного по-умолчанию. Далее используется обработчик событий. Код\r\n\r\n\ton: {\n\tonSelectChange: function(){\n\t}\n\r\n\r\nвыполняется в тот момент, когда пользователь выбирает новый элемент в дереве. Когда это происходит, выполняется код, помещенный в тело функции. В нашем случае происходит следующее: строка selected = $$(\"myTree\").getSelectedId(); присваивает переменной id выбранного в данный момент элемента дерева. Для папки это будет цифра, соответствующая ее номеру в иерархии, а для альбома — имя массива, содержащего информацию о нем. Поскольку выводить на экран информацию о папке в наши планы не входит, сперва нужно проверить, не является ли возвращенное значение цифрой: if (isNaN(selected)). Если это не цифра (а нам только этого и нужно), то список обновляется с помощью этого кода:\r\n\r\n$$(\"myList\").clearAll();\n$$(\"myList\").define(\"data\", selected);\n$$(\"myList\").refresh();\n\r\n\r\nСначала список очищается, затем инициализируется измененным значением selected с помощью метода define(), который принимает два значения: свойство, которое нужно изменить, и новое значение для этого свойства. Затем содержимое таблицы обновляется. \r\n\r\nИ, собственно, результат:\r\n\r\n\r\n\r\nТеперь можно переключаться между разными элементами дерева и данные в таблице при этом будут обновляться.\r\n\r\nПолученные знания о взаимодействии элементов понадобятся на следующем этапе, на котором будет добавлена возможность просматривать обложки альбомов.\r\n\r\nДля визионеров\r\nНу что ж, придется попотеть еще немного, чтобы увидеть обложки. Для этого понадобится новая переменная, которая будет содержать путь к обложке по-умолчанию:\r\n\r\nvar coverPath = \"imgs/oceanData.jpg\";\n\r\n\r\nПоскольку в этом случае, как и в предыдущем, вид приложения меняется в соответствии с изменениями в дереве, код необходимый для смены обложек также нужно добавлять в код дерева. Сразу после $$(\"myList\").refresh(); добавим такие строки:\r\n\r\ncoverPath = \"imgs/\" + selected + \".jpg\"\n$$(\"myCover\").define(\"data\", {src: coverPath});\n\r\n\r\nНазвания файлов обложек совпадают со значениями id соответствующих альбомов, а значит, можно снова использовать значение переменной selected по аналогии с предыдущим шагом. Затем нужно изменить состояние контейнера `myCover`, в котором отображается обложка. Для этого был использован уже знакомый метод define().\r\n\r\nОсталось заставить соответствующий контейнер отображать картинку. Для этого строку template:\"Album Art\", width: 250, height: 250 нужно заменить на:\r\n\r\n\twidth: 250, height: 250, id:\"myCover\", data: {src:coverPath},\n\ttemplate: function (obj) {\n\t    return '&lt;img src=\"'+obj.src+'\"/&gt;'\n  \t}\n\r\n\r\nЭтот пример не так очевиден на первый взгляд. Давайте разбираться. width и height были установлены заранее, ничего нового тут нет; id нужен для доступа к содержимому контейнера — тоже без сюрпризов; а вот дальше начинается самое интересное: свойство data определяет содержимое контейнера. Значение src соответствует пути к файлу изображения, и именно его нужно изменить, чтобы изменилась обложку. Последующая функция нужна для генерации HTML-кода, и ее без лишней нужды лучше не трогать.\r\n\r\nТеперь проверим, как работает отображение обложек. Внешний вид по-умолчанию:\r\n\r\n\r\n\r\nВнешний вид после выбора нового элемента дерева:\r\n\r\n\r\n\r\nОбложки меняются, как и задумано. Осталось добавить кнопки управления.\r\n\r\nБерем приложение под контроль\r\nСамая ответственная часть нашего примера. Добавление кнопок. Поскольку наш плеер минималистичен донельзя, обойтись можно тремя кнопками: Previous, Play / Pause и Next.\r\n\r\nПоскольку некоторый опыт работы с Webix уже имеется, этот последний штрих не будет таким уж сложным. Для добавления кнопок нужно заменить template:\"Controls\", height: 60 на:\r\n\r\ncols: [ {view:\"button\", value:\"&lt; Previous\"}, {view:\"button\", value:\"Play / Pause\"}, {view:\"button\", value:\"Next &gt;\"}]\n\r\n\r\nЗдесь создаются три столбца, в каждый из которых добавляется по кнопочке.\r\n\r\nВот результат:\r\n\r\n\r\n\r\nИтоги\r\nНу что тут можно сказать. Самое сложное — создание интерфейса с некоторой интерактивностью — позади. Пустяки, вроде возможности воспроизведения файлов, каждый сможет реализовать сам. Для того, чтобы создать отзывчивый(responsive) интерфейс, мне не пришлось возиться с css-кодом. Разработчики уже повозились с ним за меня, а мне осталось только использовать свойства `width` и `height`, чтобы придать элементам нужный размер. \r\n\r\nНа этом, пожалуй, всё… Или..? Ах, да! Чуть не забыл о скинах. Прикрутить их к готовому проекту несложно, поэтому много времени это не займет.\r\n\r\nРестайлинг на лету\r\nВ каталоге skins можно обнаружить вот такой вот список доступных вариантов:\r\n\r\n\r\naircompact.css \r\nclouds.css\r\nglamour.css\r\nmetro.css\r\ntouch.css\r\nair.css\r\ncompact.css\r\nflat.css\r\nlight.css\r\nterrace.css\r\nweb.css\r\n\r\n\r\nДля того, чтобы попробовать тот, который показался наиболее заманчивым, нужно просто подключить соответствующую таблицу стилей к HTML-файлу. Например, добавив\r\n\r\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"codebase/skins/touch.css\"&gt;\n\r\n\r\nможно изменить вид приложения на такой:\r\n\r\n\r\n\r\nПроверить работу приложения самому можно здесь. Если хотите поэкспериментировать, добавить новых исполнителей или новые столбцы для плейлиста, исходный код доступен на GitHub.\r\n\r\nНу а на этом, пожалуй, действительно все. Надеюсь, статья помогла вам освоить основы работы с Webix. Продолжить погружение вам поможет доступная и подробная документация с множеством примеров.\r\n\r\nАдьо!"}


{"name": "Работа с формами в Webix UI", "article": "\r\n\r\nСоздание форм с помощью чистого HTML задача довольно тривиальная и подробно обсуждается в каждом уважающем себя учебнике. Но все становится куда сложнее, если вам нужно, например, разнести элементы формы по нескольким табам. В этом случае без фреймворка не обойтись. В этой статье я расскажу, как можно создать сложные веб-формы с помощью UI-фреймворка Webix.\r\n\r\n\r\n\r\nОсновы. Как создать простую форму \r\nСперва давайте разберемся с тем, как можно создать форму с помощью Form Component. В Вебикс все элементы интерфейса описываются через JSON. Для создания формы нужно использовать объект со свойство view:\"form\". У этого же объекта нужно задать свойство elements — это массив, содержащий элементы, из которых состоит ваша форма.\r\n\r\nВот как это работает:\r\n\r\nwebix.ui({\n\tview:\"form\",\n\telements: [\n\t\t{ /* первый компонент формы */ },\n\t\t{ /* второй компонент формы */},\n\t\t{ /* и т.д. */}\n\t]\n});\n\r\n\r\nВ качестве элемента формы можно использовать любой другой компонент Webix UI: текстовое поле, чекбокс, кнопку и т.п. \r\n\r\nДля того, чтобы увидеть, как все это работает на практике, давайте создадим простую форму в качестве примера. Для этого нам понадобятся: два текстовых поля: одно для имени пользователя и одно для пароля; один чекбокс, чтобы быть уверенными в том, что пользователь принимает условия соглашения; и последний элемент — кнопка Submit.\r\n\r\nИтак, код:\r\n\r\nwebix.ui({\n\tview:\"form\",\n\tid:\"myForm\",\n\tcontainer: \"areaA\",\n\twidth: 350,\n\telements: [\n\t\t{view:\"text\", label:\"Username\", name:\"username\"},\n\t\t{view:\"text\", label:\"Password\", name:\"password\",\n\t\t type:\"password\"},\n\t\t{view:\"checkbox\", labelRight:\"I accept terms of use\",\n\t\t name:\"accept\"},\n\t\t{view:\"button\", value: \"Submit\", width: 150, align:\"center\",\n\t\t click:submit}\n\t]\n});\n\r\n\r\nНичего такого, к чему бы мы не были готовы. Свойство view:\"form\" uговорит о том, что нас интересует именно форма. Свойства label работают также, как и HTML тег label. Получить значение каждого элемента формы можно через свойство name. Для того, чтобы скрыть вводимые символы в поле Password, используется свойство type:\"password\". Что интересно, так это свойство click:submit в коде описания кнопки. Оно определяет функцию, которая будет вызвана после того, как кнопка будет нажата. Это свойство необязательно, но будет полезно проверить с его помощью, всё ли хорошо с введенными данными.\r\n\r\nВот пример кода, который выводит на экран введенные значения. Для вывода сообщений в нем используется Webix Message Box:\r\n\r\nfunction submit(){\n\twebix.message(JSON.stringify($$(\"myForm\").getValues(), null, 2));\n}\n\r\n\r\nВ этом примере с помощью метода getValues()мы получаем значения элементов Webix, а метод JSON.stringify() служит для преобразования полученных данных в строку JSON.\r\n\r\nИтак, все готово и мы можем проверить результат:\r\n\r\n\r\n\r\nПосле ввода данных можно проверить работу формы с помощью кнопки Submit:\r\n\r\n\r\n\r\nВсе работает как и положено. Поскольку нам теперь известны основы создания форм, можно попробовать создать что-то более сложное.\r\n\r\nКод и демо можно глянуть здесь — webix.com/snippet/2259ec41\r\n\r\nИспользование сложных контролов на примере Multicombo\r\nWebix предоставляет несколько контролов, помогающих пользователю с выбором во время работы с формами. На мой взгляд, один из самых интересных из них это Multicombo. Этот контрол позволяет реализовать множественный выбор из элементов выпадающего списка. \r\n\r\nНапример, вы хотите создать страницу для создания резюме разработчика. Вот упрощенный пример формы, которую вы можете использовать:\r\n\r\n\r\n\r\nПоскольку вполне вероятно, что пользователь владеет более чем одним языком программирования и вы вооружены списком языков, это тот самый случай, когда можно использовать Multicombo. Вот пример файла data.js, который содержит нужные данные:\r\n\r\nvar languages = [\n\t{id:1, lang:\"4th Dimension/4D\"},\n\t{id:2, lang:\"ABAP\"},\n\t/* и т.д. */\n]\n\r\n\r\nДавайте используем Multicombo в поле Skills:\r\n\r\n{view:\"multicombo\", name:\"skills\", label:\"Skills\", button: true, \n suggest: {\n      body:{\n        data:languages,\n        template:webix.template(\"#lang#\")\n      }\n },\n}\n\r\n\r\nПомимо уже знакомых нам свойств, в этом примере имеется и что-то новое. Свойство button: true создаст кнопку подтверждения выбора в выпадающем списке. Для того, чтобы указать источник содержимого для выпадающего списка используется свойство suggest. Можно, например, просто указать путь к файлу: suggest: \"path/to/file/data.js\". Но лучше всего использовать шаблон в комбинации со свойством data, что позволит извлечь из целевого архива именно те данные, которые вам нужны.\r\n\r\nНиже показан пример работы такого контрола. После клика в текстовом поле появится выпадающее меню с доступными для выбора вариантами:\r\n\r\n\r\n\r\nМожно промотать список и выбрать нужные варианты или начать вводить текст:\r\n\r\n\r\n\r\nФорма из этого примера вернет список ID выбранных пунктов:\r\n\r\n\r\n\r\nКод и демо можно глянуть здесь — webix.com/snippet/63f6328e\r\n\r\nПолезными также могут оказаться такие контролы как Grid Suggest и Dataview Suggest\r\n\r\nИспользование дерева как элемента формы\r\nWebix не ограничивает вас использованием текстовых полей, кнопок, чекбоксов и прочих привычных компонентов в качестве элементов формы. В форму можно поместить практически любой виджет. Давайте попробуем сделать это на примере Tree. Он не был изначально предназначен для использования внутри формы, поэтому он не имеет методов setValue() и getValue(), необходимых для получения данных о выбранных элементах. Как это можно исправить? Можно использовать метод protoUI, который позволяет создавать новые элементы на основе уже имеющихся:\r\n\r\nwebix.protoUI({\n\tname:\"formTree\",\n\tsetValue:function(value){ this.checkItem(value); },\n\tgetValue:function(){ return this.getChecked(); }\n}, webix.ui.tree);\n\r\n\r\nВ этом примере мы создали новый компонент, который называется formTree. Затем мы определили для него методы setValue() и getValue(). И, наконец, указали, что хотим создать новый компонент на основе дерева. \r\n\r\nПрежде чем его использовать, давайте создадим необходимые данные для нашего дерева:\r\n\r\nvar treedata = [\n\t{ id: \"1\", value: \"Web\", data: [\n\t\t{ id: \"1.1\", value: \"HTML\" },\n\t\t{ id: \"1.2\", value: \"CSS\" },\n\t\t/* some more data */\n\t]},\n\t{id:\"2\", value:\"Scripting\", data: [\n\t\t{ id: \"2.1\", value: \"Shell\" },\n\t\t/* some more data here */\n\t]},\n]\n\r\n\r\nТеперь можно добавить новый элемент в форму. Сделать это можно так же, как и в случае с любым другим элементом:\r\n\r\n{view:\"formTree\", name:\"skills\", data:treedata, \n height: 150, threeState: true,\n template: \"{common.icon()} {common.checkbox()}   #value#\"\n},\n\r\n\r\nСвойство threeState:true включает 3-state checkboxes, а шаблон добавляет чекбоксы к узлам дерева.\r\n\r\nРезультат:\r\n\r\n\r\n\r\nДля того, чтобы проверить, насколько хорошо работают определенные нами методы для нового компонента:\r\n\r\n\r\n\r\nКод и демо можно глянуть здесь — webix.com/snippet/9f166141\r\n\r\nФормы с табами и Многошаговые формы\r\nЕсли вы хотите создать достаточно большую форму, может оказаться полезной возможность разделить ее на несколько табов или создать многошаговую форму. Webix позволяет поместить внутрь формы разные UI компоненты, чтобы добиться нужного результата. \r\n\r\nДобавляем табы с помощью Tabview\r\n\r\nTabview component позволяет создать набор компонентов с таббаром, служащим для переключения между ними. В качестве содержимого каждого таба можно использовать отдельный компонент или создать свой собственный лэйаут с помощью свойств rows и cols.\r\n\r\nВот как работает Tabview:\r\n\r\nview:\"tabview\",\n/* содержимое элемента */\ncells: [\n\t{\n\t\theader:\"First tab label\",\n\t\tbody: {\n\t\t\t/* содержимое первого таба */\n\t\t}\n\t},\n\t\n\t{\n\t\theader:\"Second tab label\",\n\t\tbody: {\n\t\t\trows:[\n\t\t\t\t{ /* содержимое первого ряда */},\n\t\t\t\t{ /* содержимое второго ряда */}\n\t\t\t]\n\t\t}\n\t},\n\t/* и т.д. */\n]\n\r\n\r\nГлавная идея этого подхода состоит в том, чтобы поместить Tabview с нужными полями внутри формы. Однако, стоит помнить о том, что компоненты, общие для всей формы (например, кнопка Submit или чекбокс «I agree») должны располагаться за пределами Tabview.\r\n\r\nНапример:\r\n\r\nview:\"form\",\nelements:[\n\t{view:\"tabview\", height:250,\n\t cells:[\n\t\t /* заголовок и содержимое 1-го таба */\n\t\t {header:\"Personal Info\",\n\t\t  body:{\n\t\t\t  rows:[\n\t\t\t\t  {view:\"text\", label:\"Name\", name:\"name\"},\n\t\t\t\t  /* еще поля */\n\t\t\t  ]\n\t\t }\n\t\t},\n\t\t/* заголовок и содержимое 2-го таба */\n\t\t{header:\"Delivery Details\",\n\t\t body:{\n\t\t\t rows:[\n\t\t\t /* еще немножко полей */\n\t\t\t ]\n\t\t }\n\t\t}\n\t]\n   }, /* здесь кончается Tabview */\n   {view:\"button\", value: \"Submit\", width: 150, \n    align:\"center\", click:submit}     \n]\n\r\n\r\nЭто все, что вам нужно для создания формы с табами. Ниже приведен результат:\r\n\r\n\r\n\r\nЛучшая часть всей этой истории состоит в том, что вам не нужно писать какой-то дополнительный код, чтобы разные части формы работали как единое целое. Просто поместите Tabview внутрь формы и не забудьте про свойство name для каждого ее элемента.\r\n\r\nКнопка Submit это подтверждает:\r\n\r\n\r\n\r\nКод и демо можно глянуть здесь — webix.com/snippet/79eb2712\r\n\r\nВ качестве альтернативы табам, вы можете попробовать, например, Accordion.\r\n\r\nСоздание многошаговой формы с помощью Multiview\r\nMultiview позволяет создавать последовательность элементов и просматривать их один за другим, что позволяет экономить место на экране. Более того, переключение происходит с эффектом анимации! Можно создать табы для переключения между компонентами, но, поскольку нас интересует многошаговая форма, давайте используем кнопки для нашего примера. \r\n\r\nВ первую очередь нам понадобятся функции для перехода между элементами формы:\r\n\r\nfunction next(){\n\tvar parentCell = this.getParentView().getParentView();\n\tvar index = $$(\"formCells\").index(parentCell);\n\tvar next = $$(\"formCells\").getChildViews()[index+1]\n\tif(next)\n\t\tnext.show();\n}\n\nfunction back(){\n\t$$(\"formCells\").back();\n}\n\r\n\r\nЭтот код использует значение ID элемента Multiview, так что не забудьте установить его. Что касается кода формы, он практически не изменяется. Нам нужно только изменить содержимое массива elements. Сам компонент Multiview создается схожим образом с элементом Tabview из прошлого примера. На этот раз нам нужно добавить внутрь этого компонента дополнительный ряд, который будет содержать кнопки управления.\r\n\r\nВот как это можно сделать:\r\n\r\n {view:\"multiview\", id:\"formCells\", cells: [\n\t/* 1-й шаг формы */\n\t{rows:[\n\t\t {/* определение полей */},\n\t\t {cols:[\n\t\t\t /* кнопки */\n\t\t\t {}, /* пустой элемент */\n\t\t\t {view:\"button\", value:\"Next\", click:next}\n\t\t  ]}\n\t]},\n\t\n\t/* 2-й шаг формы */\n\t{rows:[\n\t\t{/* ещё поля */},\n\t\t{cols:[\n\t\t\t/*кнопки*/\n\t\t\t{view:\"button\", value:\"Back\", click:back},\n\t\t\t{view:\"button\", value:\"Next\", click:next}\n\t\t]}\n\t]},\n\n\t/* последний шаг формы */\n\t{rows:[\n\t\t{/* поля... */},\n\t\t{cols:[\n\t\t\t/*кнопки*/\n\t        {view:\"button\", value:\"Back\", click:back },\n\t        {view:\"button\", value:\"Submit\", click:submit}\n\t\t]}\n\t]}\n]}\n\r\n\r\nДавайте посмотрим на результат:\r\n\r\n\r\n\r\nПосле нажатия кнопки Next, появится следующая часть формы:\r\n\r\n\r\n\r\nА теперь давайте проверим введенные данные:\r\n\r\n\r\n\r\nВсе работает.\r\n\r\nКод и демо можно глянуть здесь — webix.com/snippet/39464194\r\n\r\nЗаключение\r\nWebix позволяет вам создавать практически любые комбинации компонентов. Внутрь формы можно поместить любой виджет или контрол. Если вас не устраивает функционал определенного компонента, можно создать на его основе свой собственный с помощью protoUI и, опять-таки, поместить его в форму. Таким образом, практически ничто не ограничивает вашу фантазию."}


{"name": "Визуализируй это, или планирование Agile проектов с помощью диаграммы Ганта", "article": "На первый взгляд может показаться, что Agile методология не является одним из тех подходов, для которых определяющую роль играет планирование. Судите сами: люди и взаимодействие между ними являются более важными, чем процессы и инструменты; работающий продукт важнее документации; готовность к изменениям, согласно Agile Manifesto, важнее следования первоначальному плану. С первого взгляда больше похоже на своего рода творческий беспорядок, чем на серьезную и основательную модель разработки программного обеспечения. Но это только с первого взгляда. Agile подход как нельзя лучше соответствует динамичности современного мира и предпочитает адаптивное планирование следованию изначальному генеральному плану. Видимо, именно поэтому он такой гибкий.\r\n\r\nДиаграммы Ганта. Визуализируй это!\r\n\r\n\r\nВсем нам удобней воспринимать визуальные данные, чем текст. Отключите иконки на рабочем столе вашего компьютера и вы поймете, что я имею в виду.\r\n\r\nОдним из наиболее удобных и привычных способов визуализировать процесс разработки являются диаграммы Ганта. Они могут пригодиться не только для проектирования процесса разработки ПО. Хотите спланировать постройку дома? Не вопрос! С их помощью можно визуализировать даже ваш любимый рецепт домашней лазаньи!\r\n\r\nВыглядит удобно, но ответить на вопрос ЧТО именно стоит использовать для выполнения поставленной задачи это только половина решения. Нужно также определиться и с тем, КАК это использовать наилучшим образом. И это именно тот момент, когда на горизонте появляется GanttPRO.\r\n\r\nВ теории\r\nGanttPRO — это онлайн приложение, которое создано для того, чтобы помочь вам с планированием проектов, распределением задач и контролем за их выполнением. \r\n\r\nОсновные особенности:\r\n\r\n — Планирование задач, основанное на **приоритетах**\r\n — Распределение задач между участниками проекта\r\n — Критический путь поможет вам быстрее закончить работу над проектом. Используйте его для определения слабых мест\r\n — Набор шаблонов окажется полезным, если вы не знаете, с чего начать. Доступны шаблоны для Разработки ПО, Релиза Продукта, Разработки Дизайна, Стартапа и прочих задач. Более того, у меня есть надежная инсайдерская информация о том, что в ближайшем будущем появится возможность создавать собственные шаблоны. Но это только между нами\r\n — Масштабирование в диапазоне от нескольких часов до месяцев поможет рассмотреть в деталях отдельные задачи или весь проект целиком\r\n — Drag-and-drop. Просто потому, что так удобнее\r\n — Фильтр и поиск\r\n\r\nНу а теперь то, ради чего мы все собрались. Agile-ориентированные возможности, которые помогут вам работать в команде:\r\n\r\n — Продвинутая система шаринга. Можно поделиться проектом с заказчиком или с коллегами посредством электронной почты или отправив им ссылку на проект. Более того, можно задавать права на просмотр либо редактирование проекта, чтобы работать над ним сообща\r\n — Экспорт проекта в PDF, PNG, XLSX или iCalc. Полученный файл можно отправить заказчику или использовать в отчете\r\n — Автоматическое планирование. Внезапно появился новый таск от заказчика? Вы можете добавить его в проект, приложение автоматически сдвинет таски и пересчитает время, которое понадобится на выполнение всего проекта с учетом новой задачи. GanttPRO хороший помощник для того, чтобы всегда иметь общее видение проекта и планировать потом с помощью ганта спринты по разработке, низкочастотные цели.\r\n — Линия прогресса поможет следить за тем, на какой стадии находится выполнение. Вы можете подумать, что этой фиче место скорее в основных особенностях, но фокус в том, что после того, как вы дали кому-то права на редактирование, вы можете вместе менять актуальный статус\r\n\r\nЕсли вам интересно, как это все реализовано, вот список использованных технологий:\r\n\r\n — JavaScript библиотека Webix\r\n — HTML5\r\n — CSS3\r\n — JavaScript\r\n — Node.js\r\n\r\nНа практике\r\nЧто ж, теперь самое время попробовать приложение в работе.\r\n\r\nПервые шаги\r\nGanttPRO — это онлайн приложение. Таким образом, вам не нужно ничего скачивать или устанавливать. Просто откройте домашнюю страницу проекта и нажмите «Начать»:\r\n\r\n\r\n\r\nИ здесь вас ждут первые хорошие новости: все что нужно, чтобы начать работу это ваш адрес электронной почты или аккаунт в соцсети. Никакой возни с заполнением форм!\r\n\r\nСразу после регистрации вы можете выбрать один из доступных шаблонов или создать пустой проект. Разработчики предусмотрели возможность вручную устанавливать время начала проекта и единицу планирования (часы, дни, недели, месяцы).\r\n\r\nМожете посмотреть, что эти шаблоны из себя представляют, но для того, чтобы как следует разобраться в основах, лучше все же выбрать «Пустой», единицу планирования — день:\r\n\r\n\r\n\r\nВот так он выглядит по-умолчанию:\r\n\r\n\r\n\r\nКак вы можете заметить, это не пустой пустой проект. Разработчики заранее добавили несколько задач. Видимо, для того, чтобы избавить нас от боязни чистого листа. Давайте попробуем отредактировать наш проект.\r\n\r\nНовые Задачи. И Участники, которые будут их решать\r\nДля того, чтобы добавить новых участников в ваш проект, нажмите кнопку «Участники» слева внизу. Затем задайте имя нового участника или команды:\r\n\r\n\r\n\r\nДавайте теперь разберемся с Задачами. Все доступные поля (Задача, Начало, Длительность и т.д.) можно редактировать. Просто кликните на любое поле, значение которого вы хотите изменить, и вы увидите, как все просто. По клику появится текстовое поле для названия задачи, календарь для выбора даты начала выполнения задачи, кнопки \"+\" и \"-\" для изменения длительности выполнения и список доступных участников для поля «Назначен на». Если вы хотите изменить более одного значения за раз, используйте кнопку редактирования. Ее можно найти в столбике «Действия». Да-да, этот маленький карандашик. Давайте отредактируем имеющиеся задачи, чтобы наш проект был больше похож на настоящий:\r\n\r\n\r\n\r\nВот как выглядит проект с задачами, назначенными определенным участникам:\r\n\r\n\r\n\r\nВыглядит аккуратно и наглядно, но, честно говоря, не очень солидно. Давайте добавим новые задачи и посмотрим, как работают зависимости.\r\n\r\nБольше Задач. Больше Зависимостей. И строка прогресса, чтобы видеть, на какой все стадии\r\nДобавлять задачи можно несколькими способами. С помощью кнопки «Добавить новую задачу...» можно создать задачу, не связанную ни с какими другими задачами. Можно также использовать кнопку \"+\" рядом с уже существующими задачами. И тут нам предоставляется выбор:\r\n\r\n\r\n\r\nЧто нам интересно на данный момент, так это новая подзадача. Вот как она выглядит по умолчанию:\r\n\r\n\r\n\r\nИ теперь самое время обратить внимание на маленькие кружочки, расположенные по обеим сторонам задания, а также на треугольник снизу, потому как именно здесь начинается магия drag-and-drop и автоматического планирования, которое по дефолту включено для всех новых проектов.\r\n\r\nТреугольник — это слайдер, с помощью которого можно регулировать прогресс выполнения той или иной задачи, а кружки нужны для того, чтобы определить зависимости между ними. Можно просто перетягивать их, соединяя конец одной задачи с началом другой. Как только две задачи соединятся связью, приложение пересчитывает длительность проекта и определяет положение задачи, что очень удобно для больших проектов. Задачи также можно перемещать по горизонтали, чтобы определить дату начала работы над ними, а также менять их размер для определения длительности задачи. Выглядит интуитивно понятным, не так ли?\r\n\r\n\r\n\r\nЗаметьте, как изменилось состояние проекта и родительской задачи: размер и длительность увеличились автоматически после добавления новой подзадачи.\r\n\r\nВремя поделиться с другими\r\nНепрерывное взаимодействие является одним из краеугольных камней Agile подхода. Вот почему разработчики добавили несколько возможных способов совместной работы над проектом.\r\n\r\nПосле того как определены основные задачи можно поделиться планом разработки с заказчиком. Для этого нужно кликнуть кнопку «Поделиться», а затем назначить необходимые права и ввести адрес электронной почты. Можно также получить ссылку для просмотра и отправить ее нужному адресату:\r\n\r\n\r\n\r\nТакже можно экспортировать проект, например, в PDF и отправить полученный файл по почте:\r\n\r\n\r\n\r\nКритический путь. Ищем причины простоев\r\nОтлично. Теперь заказчик может следить за процессом разработки и вносить изменения по мере необходимости. Неплохо было бы этот самый процесс ускорить. И тут нам поможет Критический путь. Он показывает те задачи, которым стоит уделить особое внимание, потому что время их выполнения влияет на продолжительность проекта больше всего. Включить Критический путь можно в меню «Настройки». Давайте попробуем:\r\n\r\n\r\n\r\nНичего себе! Судя по всему, абсолютно каждая задача критична для такого маленького проекта, как мой. Нужно бы вернуться к нему поскорей!\r\n\r\nНу а если серьезно, Критический путь может оказаться крайне полезным для сложных проектов с большим числом задач и зависимостей между ними.\r\n\r\nМожно использовать Критический путь вместе с возможностью группировки. Вы, возможно, уже заметили небольшую кнопку справа от кнопки «Участники». Она включает группировку по задействованным командам и поможет вам определить, на какую из них приходится большее число критических задач. \r\n\r\n\r\n\r\nВам письмо! Вносим изменения на лету\r\nА теперь представьте, что релиз первой версии вашего приложения уже состоялся и вы приступили ко второй итерации разработки. И тут вам приходит письмо от заказчика, в котором он просит вас улучшить юзабилити вашего приложения, а также добавить набор скинов. Возможным вариантом осчастливить заказчика в короткие сроки будет разделение команды дизайнеров на две подкоманды (одна для юзабилити, одна для работы над скинами) и разбиение задачи дизайна на две подзадачи. Кажется, мы неплохо справились:\r\n\r\n\r\n\r\nУправление процессом управления\r\nМы разобрались, как работают основы управления проектом. Давайте посмотрим на другие полезные инструменты.\r\n\r\nМасштаб\r\nМеняя масштаб, вы можете посмотреть на ваш проект «с высоты птичьего полета», либо рассмотреть подробно небольшие задачи длительностью в несколько часов.\r\n\r\n\r\n\r\nРабочие дни и рабочие часы\r\nВ GanttPRO предусмотрена возможность изменять рабочее время команды: дни и часы. \r\n\r\n\r\n\r\nНо что самое приятное, приложение мгновенно пересчитывает все созданные задачи, исходя из установленного времени работы по проекту, и выдает данные в эффективном времени и календарных днях. Клиент доволен!\r\n\r\n\r\n\r\nСкрашиваем будни менеджера проектов\r\nGanttPRO также позволяет вам менять внешний вид проекта. Эти опции доступны в Настройках.\r\n\r\nРежим отображения позволяет выбрать между тремя доступными вариантами: Авто, Компактный и Планшет. Последний увеличивает размеры элементов проекта, чтобы было удобно редактировать их вручную. Буквально.\r\n\r\nВид позволяет выбрать один из четырех доступных скинов. Вот как, например, выглядит Broadway:\r\n\r\n\r\n\r\nИтоги\r\nПохоже, разработчики поставили перед собой задачу создать приятно выглядящее и интуитивно понятное приложение. Диаграммы можно редактировать, перетаскиванием задач вдоль временной шкалы, при этом родительские задачи, а также весь проект в целом изменяются автоматически в соответствии с вашими действиями. Можно быстро устанавливать зависимости и менять текущий прогресс выполнения. Система шаринга довольно удобна. И хотя GanttPRO не может претендовать на звание комплексной agile-ориентированной программы, функцию быстрого планирования он выполняет на уровне хорошего конструктора. Разобраться сходу в принципах работы помогут готовые шаблоны или материалы на домашней странице проекта. Для того, чтобы освоить GanttPRO даже не нужно погружаться в документацию. Просто уделите приложению некоторое время и сможете управляться с диаграммами одной левой."}


